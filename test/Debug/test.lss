
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000101e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000101e  000010b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800064  00800064  000010b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027d5  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fe5  00000000  00000000  00003b51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001370  00000000  00000000  00004b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000668  00000000  00000000  00005ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ef6  00000000  00000000  00006510  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bd0  00000000  00000000  00007406  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00008fd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	30 c0       	rjmp	.+96     	; 0x62 <__ctors_end>
       2:	00 00       	nop
       4:	49 c0       	rjmp	.+146    	; 0x98 <__bad_interrupt>
       6:	00 00       	nop
       8:	f3 c0       	rjmp	.+486    	; 0x1f0 <__vector_2>
       a:	00 00       	nop
       c:	68 c3       	rjmp	.+1744   	; 0x6de <__vector_3>
       e:	00 00       	nop
      10:	3a c3       	rjmp	.+1652   	; 0x686 <__vector_4>
      12:	00 00       	nop
      14:	41 c0       	rjmp	.+130    	; 0x98 <__bad_interrupt>
      16:	00 00       	nop
      18:	3f c0       	rjmp	.+126    	; 0x98 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3d c0       	rjmp	.+122    	; 0x98 <__bad_interrupt>
      1e:	00 00       	nop
      20:	3b c0       	rjmp	.+118    	; 0x98 <__bad_interrupt>
      22:	00 00       	nop
      24:	59 c1       	rjmp	.+690    	; 0x2d8 <__vector_9>
      26:	00 00       	nop
      28:	37 c0       	rjmp	.+110    	; 0x98 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	35 c0       	rjmp	.+106    	; 0x98 <__bad_interrupt>
      2e:	00 00       	nop
      30:	33 c0       	rjmp	.+102    	; 0x98 <__bad_interrupt>
      32:	00 00       	nop
      34:	31 c0       	rjmp	.+98     	; 0x98 <__bad_interrupt>
      36:	00 00       	nop
      38:	2f c0       	rjmp	.+94     	; 0x98 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2d c0       	rjmp	.+90     	; 0x98 <__bad_interrupt>
      3e:	00 00       	nop
      40:	2b c0       	rjmp	.+86     	; 0x98 <__bad_interrupt>
      42:	00 00       	nop
      44:	29 c0       	rjmp	.+82     	; 0x98 <__bad_interrupt>
      46:	00 00       	nop
      48:	27 c0       	rjmp	.+78     	; 0x98 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	25 c0       	rjmp	.+74     	; 0x98 <__bad_interrupt>
      4e:	00 00       	nop
      50:	23 c0       	rjmp	.+70     	; 0x98 <__bad_interrupt>
      52:	00 00       	nop
      54:	3b 04       	cpc	r3, r11
      56:	3f 04       	cpc	r3, r15
      58:	43 04       	cpc	r4, r3
      5a:	47 04       	cpc	r4, r7
      5c:	4e 04       	cpc	r4, r14
      5e:	55 04       	cpc	r5, r5
      60:	5c 04       	cpc	r5, r12

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d4 e0       	ldi	r29, 0x04	; 4
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	10 e0       	ldi	r17, 0x00	; 0
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	ee e1       	ldi	r30, 0x1E	; 30
      76:	f0 e1       	ldi	r31, 0x10	; 16
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	a4 36       	cpi	r26, 0x64	; 100
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	20 e0       	ldi	r18, 0x00	; 0
      86:	a4 e6       	ldi	r26, 0x64	; 100
      88:	b0 e0       	ldi	r27, 0x00	; 0
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	af 36       	cpi	r26, 0x6F	; 111
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	5a d1       	rcall	.+692    	; 0x34a <main>
      96:	c1 c7       	rjmp	.+3970   	; 0x101a <_exit>

00000098 <__bad_interrupt>:
      98:	b3 cf       	rjmp	.-154    	; 0x0 <__vectors>

0000009a <lcd_send_command>:
*				 		the first nibble then the second nibble
*						enabling and disabling the LCD in between
*/
void lcd_send_command (uint8_t command)
{
	DATA_BUS=((command&0b11110000));
      9a:	98 2f       	mov	r25, r24
      9c:	90 7f       	andi	r25, 0xF0	; 240
      9e:	9b bb       	out	0x1b, r25	; 27
	CTL_BUS &=~(1<<LCD_RS);
      a0:	98 b3       	in	r25, 0x18	; 24
      a2:	9d 7f       	andi	r25, 0xFD	; 253
      a4:	98 bb       	out	0x18, r25	; 24
	CTL_BUS |=(1<<LCD_EN);
      a6:	98 b3       	in	r25, 0x18	; 24
      a8:	98 60       	ori	r25, 0x08	; 8
      aa:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ac:	e1 ee       	ldi	r30, 0xE1	; 225
      ae:	f4 e0       	ldi	r31, 0x04	; 4
      b0:	31 97       	sbiw	r30, 0x01	; 1
      b2:	f1 f7       	brne	.-4      	; 0xb0 <lcd_send_command+0x16>
      b4:	00 c0       	rjmp	.+0      	; 0xb6 <lcd_send_command+0x1c>
      b6:	00 00       	nop
	_delay_ms(5);
	CTL_BUS &=~(1<<LCD_EN);
      b8:	98 b3       	in	r25, 0x18	; 24
      ba:	97 7f       	andi	r25, 0xF7	; 247
      bc:	98 bb       	out	0x18, r25	; 24
      be:	e1 ee       	ldi	r30, 0xE1	; 225
      c0:	f4 e0       	ldi	r31, 0x04	; 4
      c2:	31 97       	sbiw	r30, 0x01	; 1
      c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_send_command+0x28>
      c6:	00 c0       	rjmp	.+0      	; 0xc8 <lcd_send_command+0x2e>
      c8:	00 00       	nop
	_delay_ms(5);
	DATA_BUS=((command&0b00001111)<<4);
      ca:	f0 e1       	ldi	r31, 0x10	; 16
      cc:	8f 9f       	mul	r24, r31
      ce:	c0 01       	movw	r24, r0
      d0:	11 24       	eor	r1, r1
      d2:	8b bb       	out	0x1b, r24	; 27
	CTL_BUS |=(1<<LCD_EN);
      d4:	88 b3       	in	r24, 0x18	; 24
      d6:	88 60       	ori	r24, 0x08	; 8
      d8:	88 bb       	out	0x18, r24	; 24
      da:	81 ee       	ldi	r24, 0xE1	; 225
      dc:	94 e0       	ldi	r25, 0x04	; 4
      de:	01 97       	sbiw	r24, 0x01	; 1
      e0:	f1 f7       	brne	.-4      	; 0xde <lcd_send_command+0x44>
      e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcd_send_command+0x4a>
      e4:	00 00       	nop
	_delay_ms(5);
	CTL_BUS &=~(1<<LCD_EN);
      e6:	88 b3       	in	r24, 0x18	; 24
      e8:	87 7f       	andi	r24, 0xF7	; 247
      ea:	88 bb       	out	0x18, r24	; 24
      ec:	e1 ee       	ldi	r30, 0xE1	; 225
      ee:	f4 e0       	ldi	r31, 0x04	; 4
      f0:	31 97       	sbiw	r30, 0x01	; 1
      f2:	f1 f7       	brne	.-4      	; 0xf0 <lcd_send_command+0x56>
      f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcd_send_command+0x5c>
      f6:	00 00       	nop
      f8:	08 95       	ret

000000fa <lcd_init>:
*						default setting (cursor on)
*/
void lcd_init(void)
{

	DATA_DDR = (1<<LCD_D7) | (1<<LCD_D6) | (1<<LCD_D5)| (1<<LCD_D4);
      fa:	80 ef       	ldi	r24, 0xF0	; 240
      fc:	8a bb       	out	0x1a, r24	; 26
	CTL_DDR |= (1<<LCD_EN)|(1<<LCD_RW)|(1<<LCD_RS);
      fe:	87 b3       	in	r24, 0x17	; 23
     100:	8e 60       	ori	r24, 0x0E	; 14
     102:	87 bb       	out	0x17, r24	; 23

	DATA_BUS = (0<<LCD_D7)|(0<<LCD_D6)|(1<<LCD_D5)|(0<<LCD_D4);
     104:	80 e2       	ldi	r24, 0x20	; 32
     106:	8b bb       	out	0x1b, r24	; 27
	CTL_BUS|= (1<<LCD_EN)|(0<<LCD_RW)|(0<<LCD_RS);
     108:	88 b3       	in	r24, 0x18	; 24
     10a:	88 60       	ori	r24, 0x08	; 8
     10c:	88 bb       	out	0x18, r24	; 24
     10e:	81 ee       	ldi	r24, 0xE1	; 225
     110:	94 e0       	ldi	r25, 0x04	; 4
     112:	01 97       	sbiw	r24, 0x01	; 1
     114:	f1 f7       	brne	.-4      	; 0x112 <lcd_init+0x18>
     116:	00 c0       	rjmp	.+0      	; 0x118 <lcd_init+0x1e>
     118:	00 00       	nop

	_delay_ms(5);
	CTL_BUS &=~(1<<LCD_EN);
     11a:	88 b3       	in	r24, 0x18	; 24
     11c:	87 7f       	andi	r24, 0xF7	; 247
     11e:	88 bb       	out	0x18, r24	; 24
     120:	81 ee       	ldi	r24, 0xE1	; 225
     122:	94 e0       	ldi	r25, 0x04	; 4
     124:	01 97       	sbiw	r24, 0x01	; 1
     126:	f1 f7       	brne	.-4      	; 0x124 <lcd_init+0x2a>
     128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_init+0x30>
     12a:	00 00       	nop
	_delay_ms(5);

	lcd_send_command(LCD_CMD_4BIT_2ROW_5X7);
     12c:	88 e2       	ldi	r24, 0x28	; 40
     12e:	b5 df       	rcall	.-150    	; 0x9a <lcd_send_command>
     130:	81 ee       	ldi	r24, 0xE1	; 225
     132:	94 e0       	ldi	r25, 0x04	; 4
     134:	01 97       	sbiw	r24, 0x01	; 1
     136:	f1 f7       	brne	.-4      	; 0x134 <lcd_init+0x3a>
     138:	00 c0       	rjmp	.+0      	; 0x13a <lcd_init+0x40>
     13a:	00 00       	nop
	_delay_ms(5);
	lcd_send_command(LCD_CMD_DISPLAY_CURSOR_BLINK);
     13c:	8f e0       	ldi	r24, 0x0F	; 15
     13e:	ad df       	rcall	.-166    	; 0x9a <lcd_send_command>
     140:	81 ee       	ldi	r24, 0xE1	; 225
     142:	94 e0       	ldi	r25, 0x04	; 4
     144:	01 97       	sbiw	r24, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <lcd_init+0x4a>
     148:	00 c0       	rjmp	.+0      	; 0x14a <lcd_init+0x50>
	_delay_ms(5);
	lcd_send_command(0x80);
     14a:	00 00       	nop
     14c:	80 e8       	ldi	r24, 0x80	; 128
     14e:	a5 cf       	rjmp	.-182    	; 0x9a <lcd_send_command>
     150:	08 95       	ret

00000152 <HSERVO_voidGoToAngle>:
	//MTIM2_voidSetDutyCycle(Duty);
}

void HSERVO_voidGoToAngle(u8 Angle)
{
	u8 AngOCR = (((u16)Angle)*255)/180;
     152:	9f ef       	ldi	r25, 0xFF	; 255
     154:	89 9f       	mul	r24, r25
     156:	90 01       	movw	r18, r0
     158:	11 24       	eor	r1, r1
     15a:	a3 e8       	ldi	r26, 0x83	; 131
     15c:	bd e2       	ldi	r27, 0x2D	; 45
     15e:	10 d7       	rcall	.+3616   	; 0xf80 <__umulhisi3>
     160:	96 95       	lsr	r25
     162:	87 95       	ror	r24
     164:	92 95       	swap	r25
     166:	82 95       	swap	r24
     168:	8f 70       	andi	r24, 0x0F	; 15
     16a:	89 27       	eor	r24, r25
     16c:	9f 70       	andi	r25, 0x0F	; 15
     16e:	89 27       	eor	r24, r25
	MTIM2_voidSetDutyCycle(AngOCR);
     170:	88 c2       	rjmp	.+1296   	; 0x682 <MTIM2_voidSetDutyCycle>
     172:	08 95       	ret

00000174 <ultra_getdist>:
     174:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__data_start>
     178:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__data_start+0x1>
     17c:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_start+0x2>
     180:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__data_start+0x3>
     184:	db 01       	movw	r26, r22
     186:	ca 01       	movw	r24, r20
     188:	04 97       	sbiw	r24, 0x04	; 4
     18a:	a1 09       	sbc	r26, r1
     18c:	b1 09       	sbc	r27, r1
     18e:	8d 38       	cpi	r24, 0x8D	; 141
     190:	91 40       	sbci	r25, 0x01	; 1
     192:	a1 05       	cpc	r26, r1
     194:	b1 05       	cpc	r27, r1
     196:	28 f4       	brcc	.+10     	; 0x1a2 <ultra_getdist+0x2e>
     198:	34 2f       	mov	r19, r20
     19a:	25 2f       	mov	r18, r21
     19c:	86 2f       	mov	r24, r22
     19e:	97 2f       	mov	r25, r23
     1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <ultra_getdist+0x2e>
     1a2:	63 2f       	mov	r22, r19
     1a4:	72 2f       	mov	r23, r18
     1a6:	08 95       	ret

000001a8 <enable_ex_interrupt>:
     1a8:	85 b7       	in	r24, 0x35	; 53
     1aa:	84 60       	ori	r24, 0x04	; 4
     1ac:	85 bf       	out	0x35, r24	; 53
     1ae:	8b b7       	in	r24, 0x3b	; 59
     1b0:	80 68       	ori	r24, 0x80	; 128
     1b2:	8b bf       	out	0x3b, r24	; 59
     1b4:	08 95       	ret

000001b6 <ultrasonic_init>:
     1b6:	84 b3       	in	r24, 0x14	; 20
     1b8:	81 60       	ori	r24, 0x01	; 1
     1ba:	84 bb       	out	0x14, r24	; 20
     1bc:	81 b3       	in	r24, 0x11	; 17
     1be:	87 7f       	andi	r24, 0xF7	; 247
     1c0:	81 bb       	out	0x11, r24	; 17
     1c2:	82 b3       	in	r24, 0x12	; 18
     1c4:	88 60       	ori	r24, 0x08	; 8
     1c6:	82 bb       	out	0x12, r24	; 18
     1c8:	ef df       	rcall	.-34     	; 0x1a8 <enable_ex_interrupt>
     1ca:	2c c2       	rjmp	.+1112   	; 0x624 <timer0_init>
     1cc:	08 95       	ret

000001ce <ultra_triger>:
     1ce:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <sensor_working>
     1d2:	81 11       	cpse	r24, r1
     1d4:	0c c0       	rjmp	.+24     	; 0x1ee <ultra_triger+0x20>
     1d6:	85 b3       	in	r24, 0x15	; 21
     1d8:	81 60       	ori	r24, 0x01	; 1
     1da:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1dc:	85 e0       	ldi	r24, 0x05	; 5
     1de:	8a 95       	dec	r24
     1e0:	f1 f7       	brne	.-4      	; 0x1de <ultra_triger+0x10>
     1e2:	85 b3       	in	r24, 0x15	; 21
     1e4:	8e 7f       	andi	r24, 0xFE	; 254
     1e6:	85 bb       	out	0x15, r24	; 21
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <sensor_working>
     1ee:	08 95       	ret

000001f0 <__vector_2>:
     1f0:	1f 92       	push	r1
     1f2:	0f 92       	push	r0
     1f4:	0f b6       	in	r0, 0x3f	; 63
     1f6:	0f 92       	push	r0
     1f8:	11 24       	eor	r1, r1
     1fa:	2f 93       	push	r18
     1fc:	3f 93       	push	r19
     1fe:	4f 93       	push	r20
     200:	5f 93       	push	r21
     202:	6f 93       	push	r22
     204:	7f 93       	push	r23
     206:	8f 93       	push	r24
     208:	9f 93       	push	r25
     20a:	af 93       	push	r26
     20c:	bf 93       	push	r27
     20e:	ef 93       	push	r30
     210:	ff 93       	push	r31
     212:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <sensor_working>
     216:	81 30       	cpi	r24, 0x01	; 1
     218:	09 f0       	breq	.+2      	; 0x21c <__EEPROM_REGION_LENGTH__+0x1c>
     21a:	4d c0       	rjmp	.+154    	; 0x2b6 <__EEPROM_REGION_LENGTH__+0xb6>
     21c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <rising_edge>
     220:	81 11       	cpse	r24, r1
     222:	0d c0       	rjmp	.+26     	; 0x23e <__EEPROM_REGION_LENGTH__+0x3e>
     224:	12 be       	out	0x32, r1	; 50
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <rising_edge>
     22c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
     230:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x1>
     234:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end+0x2>
     238:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <__data_end+0x3>
     23c:	3c c0       	rjmp	.+120    	; 0x2b6 <__EEPROM_REGION_LENGTH__+0xb6>
     23e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
     242:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
     246:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <__data_end+0x2>
     24a:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <__data_end+0x3>
     24e:	ba 2f       	mov	r27, r26
     250:	a9 2f       	mov	r26, r25
     252:	98 2f       	mov	r25, r24
     254:	88 27       	eor	r24, r24
     256:	22 b7       	in	r18, 0x32	; 50
     258:	bc 01       	movw	r22, r24
     25a:	cd 01       	movw	r24, r26
     25c:	62 0f       	add	r22, r18
     25e:	71 1d       	adc	r23, r1
     260:	81 1d       	adc	r24, r1
     262:	91 1d       	adc	r25, r1
     264:	2a e3       	ldi	r18, 0x3A	; 58
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	61 d6       	rcall	.+3266   	; 0xf30 <__udivmodsi4>
     26e:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__data_start>
     272:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__data_start+0x1>
     276:	40 93 62 00 	sts	0x0062, r20	; 0x800062 <__data_start+0x2>
     27a:	50 93 63 00 	sts	0x0063, r21	; 0x800063 <__data_start+0x3>
     27e:	da 01       	movw	r26, r20
     280:	c9 01       	movw	r24, r18
     282:	04 97       	sbiw	r24, 0x04	; 4
     284:	a1 09       	sbc	r26, r1
     286:	b1 09       	sbc	r27, r1
     288:	8d 38       	cpi	r24, 0x8D	; 141
     28a:	91 40       	sbci	r25, 0x01	; 1
     28c:	a1 05       	cpc	r26, r1
     28e:	b1 05       	cpc	r27, r1
     290:	40 f0       	brcs	.+16     	; 0x2a2 <__EEPROM_REGION_LENGTH__+0xa2>
     292:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
     296:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
     29a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_start+0x2>
     29e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_start+0x3>
     2a2:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
     2a6:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x1>
     2aa:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end+0x2>
     2ae:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <__data_end+0x3>
     2b2:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <rising_edge>
     2b6:	ff 91       	pop	r31
     2b8:	ef 91       	pop	r30
     2ba:	bf 91       	pop	r27
     2bc:	af 91       	pop	r26
     2be:	9f 91       	pop	r25
     2c0:	8f 91       	pop	r24
     2c2:	7f 91       	pop	r23
     2c4:	6f 91       	pop	r22
     2c6:	5f 91       	pop	r21
     2c8:	4f 91       	pop	r20
     2ca:	3f 91       	pop	r19
     2cc:	2f 91       	pop	r18
     2ce:	0f 90       	pop	r0
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	0f 90       	pop	r0
     2d4:	1f 90       	pop	r1
     2d6:	18 95       	reti

000002d8 <__vector_9>:
     2d8:	1f 92       	push	r1
     2da:	0f 92       	push	r0
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	0f 92       	push	r0
     2e0:	11 24       	eor	r1, r1
     2e2:	2f 93       	push	r18
     2e4:	8f 93       	push	r24
     2e6:	9f 93       	push	r25
     2e8:	af 93       	push	r26
     2ea:	bf 93       	push	r27
     2ec:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
     2f0:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
     2f4:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <__data_end+0x2>
     2f8:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <__data_end+0x3>
     2fc:	01 96       	adiw	r24, 0x01	; 1
     2fe:	a1 1d       	adc	r26, r1
     300:	b1 1d       	adc	r27, r1
     302:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
     306:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x1>
     30a:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <__data_end+0x2>
     30e:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <__data_end+0x3>
     312:	8b 3d       	cpi	r24, 0xDB	; 219
     314:	92 40       	sbci	r25, 0x02	; 2
     316:	a1 05       	cpc	r26, r1
     318:	b1 05       	cpc	r27, r1
     31a:	68 f0       	brcs	.+26     	; 0x336 <__vector_9+0x5e>
     31c:	12 be       	out	0x32, r1	; 50
     31e:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <sensor_working>
     322:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <rising_edge>
     326:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
     32a:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x1>
     32e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end+0x2>
     332:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <__data_end+0x3>
     336:	bf 91       	pop	r27
     338:	af 91       	pop	r26
     33a:	9f 91       	pop	r25
     33c:	8f 91       	pop	r24
     33e:	2f 91       	pop	r18
     340:	0f 90       	pop	r0
     342:	0f be       	out	0x3f, r0	; 63
     344:	0f 90       	pop	r0
     346:	1f 90       	pop	r1
     348:	18 95       	reti

0000034a <main>:
#include  "HAL/ULTRASONIC/ultrasonic.h"

//frequency = 10000000/(255*N)

int main(void)
{
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
     352:	a0 97       	sbiw	r28, 0x20	; 32
     354:	0f b6       	in	r0, 0x3f	; 63
     356:	f8 94       	cli
     358:	de bf       	out	0x3e, r29	; 62
     35a:	0f be       	out	0x3f, r0	; 63
     35c:	cd bf       	out	0x3d, r28	; 61
	
	
	uint32_t DST = 4 ; 
	uint8_t dst_str[15]; 
	uint8_t angle_str[6]; 
	MGPIO_voidSetPinDirection(GPIO_PORTB,0,GPIO_OUTPUT);
     35e:	41 e0       	ldi	r20, 0x01	; 1
     360:	60 e0       	ldi	r22, 0x00	; 0
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	ff d0       	rcall	.+510    	; 0x564 <MGPIO_voidSetPinDirection>
	 UART_t UART0 = UART_UART_tInit(UART_Tx_or_Rx, UART_Async_NormalSpeed, UART_Single, UART_InterruptDisable, UART_8bitData,
     366:	1f 92       	push	r1
     368:	1f 92       	push	r1
     36a:	82 e1       	ldi	r24, 0x12	; 18
     36c:	8f 93       	push	r24
     36e:	80 ec       	ldi	r24, 0xC0	; 192
     370:	8f 93       	push	r24
     372:	aa 24       	eor	r10, r10
     374:	a3 94       	inc	r10
     376:	c1 2c       	mov	r12, r1
     378:	0f 2e       	mov	r0, r31
     37a:	f3 e0       	ldi	r31, 0x03	; 3
     37c:	ef 2e       	mov	r14, r31
     37e:	f0 2d       	mov	r31, r0
     380:	00 e0       	ldi	r16, 0x00	; 0
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	40 e0       	ldi	r20, 0x00	; 0
     386:	63 e0       	ldi	r22, 0x03	; 3
     388:	ce 01       	movw	r24, r28
     38a:	46 96       	adiw	r24, 0x16	; 22
     38c:	19 d3       	rcall	.+1586   	; 0x9c0 <UART_UART_tInit>
	 UART_PArityDisable_1Stop, UART_RisingEdge, 4800);
	 
	
	MGPIO_voidSetPinDirection(GPIO_PORTD,7,GPIO_OUTPUT);
     38e:	41 e0       	ldi	r20, 0x01	; 1
     390:	67 e0       	ldi	r22, 0x07	; 7
     392:	83 e0       	ldi	r24, 0x03	; 3
     394:	e7 d0       	rcall	.+462    	; 0x564 <MGPIO_voidSetPinDirection>
	MTIM2_voidInit(TIM2_CS_DIV_8,TIM2_MODE_PCPWM,TIM2_PCPWM_NON_INVERT,0);
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	42 e0       	ldi	r20, 0x02	; 2
     39a:	61 e0       	ldi	r22, 0x01	; 1
	lcd_init();
     39c:	82 e0       	ldi	r24, 0x02	; 2
     39e:	4a d1       	rcall	.+660    	; 0x634 <MTIM2_voidInit>
	ultrasonic_init();
     3a0:	ac de       	rcall	.-680    	; 0xfa <lcd_init>
     3a2:	09 df       	rcall	.-494    	; 0x1b6 <ultrasonic_init>
	sei();
     3a4:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3a6:	83 ec       	ldi	r24, 0xC3	; 195
     3a8:	99 e0       	ldi	r25, 0x09	; 9
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <main+0x60>
     3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <main+0x66>
     3b0:	00 00       	nop
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	0f 90       	pop	r0



	_delay_ms(10);
	
	u8 angle =0;
     3b8:	0f 90       	pop	r0
	while(1){
		
		while(angle !=180){
			ultra_triger();
     3ba:	10 e0       	ldi	r17, 0x00	; 0
			HSERVO_voidGoToAngle(angle++);
     3bc:	62 c0       	rjmp	.+196    	; 0x482 <__stack+0x23>
     3be:	07 df       	rcall	.-498    	; 0x1ce <ultra_triger>
     3c0:	99 24       	eor	r9, r9
     3c2:	93 94       	inc	r9
     3c4:	91 0e       	add	r9, r17
     3c6:	81 2f       	mov	r24, r17
			
				DST=ultra_getdist();
     3c8:	c4 de       	rcall	.-632    	; 0x152 <HSERVO_voidGoToAngle>
     3ca:	d4 de       	rcall	.-600    	; 0x174 <ultra_getdist>
     3cc:	6b 01       	movw	r12, r22
     3ce:	7c 01       	movw	r14, r24
				if (DST <= 10)
     3d0:	9b e0       	ldi	r25, 0x0B	; 11
     3d2:	c9 16       	cp	r12, r25
     3d4:	d1 04       	cpc	r13, r1
     3d6:	e1 04       	cpc	r14, r1
     3d8:	f1 04       	cpc	r15, r1
				MGPIO_voidSetPinValue(GPIO_PORTB,0,GPIO_HIGH);
     3da:	28 f4       	brcc	.+10     	; 0x3e6 <main+0x9c>
     3dc:	41 e0       	ldi	r20, 0x01	; 1
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	fc d0       	rcall	.+504    	; 0x5dc <MGPIO_voidSetPinValue>
     3e4:	04 c0       	rjmp	.+8      	; 0x3ee <main+0xa4>
				else
				MGPIO_voidSetPinValue(GPIO_PORTB,0,GPIO_LOW);
     3e6:	40 e0       	ldi	r20, 0x00	; 0
     3e8:	60 e0       	ldi	r22, 0x00	; 0
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	f7 d0       	rcall	.+494    	; 0x5dc <MGPIO_voidSetPinValue>
     3ee:	d7 01       	movw	r26, r14
				if (DST<4 || DST > 400 )DST=0;
     3f0:	c6 01       	movw	r24, r12
     3f2:	04 97       	sbiw	r24, 0x04	; 4
     3f4:	a1 09       	sbc	r26, r1
     3f6:	b1 09       	sbc	r27, r1
     3f8:	8d 38       	cpi	r24, 0x8D	; 141
     3fa:	91 40       	sbci	r25, 0x01	; 1
     3fc:	a1 05       	cpc	r26, r1
     3fe:	b1 05       	cpc	r27, r1
     400:	18 f0       	brcs	.+6      	; 0x408 <__DATA_REGION_LENGTH__+0x8>
     402:	c1 2c       	mov	r12, r1
     404:	d1 2c       	mov	r13, r1
     406:	76 01       	movw	r14, r12
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     408:	4a e0       	ldi	r20, 0x0A	; 10
     40a:	be 01       	movw	r22, r28
     40c:	60 5f       	subi	r22, 0xF0	; 240
     40e:	7f 4f       	sbci	r23, 0xFF	; 255
     410:	89 2d       	mov	r24, r9
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	cf d5       	rcall	.+2974   	; 0xfb4 <__itoa_ncheck>
     416:	4a e0       	ldi	r20, 0x0A	; 10
     418:	ce 01       	movw	r24, r28
     41a:	01 96       	adiw	r24, 0x01	; 1
     41c:	5c 01       	movw	r10, r24
     41e:	bc 01       	movw	r22, r24
     420:	c6 01       	movw	r24, r12
     422:	c8 d5       	rcall	.+2960   	; 0xfb4 <__itoa_ncheck>
     424:	f5 01       	movw	r30, r10
				itoa(angle,(char*)angle_str,10);
				itoa(DST,(char*)dst_str,10);
				strcat((char*)dst_str, " "); strcat((char*)dst_str,angle_str);
     426:	01 90       	ld	r0, Z+
     428:	00 20       	and	r0, r0
     42a:	e9 f7       	brne	.-6      	; 0x426 <__DATA_REGION_LENGTH__+0x26>
     42c:	31 97       	sbiw	r30, 0x01	; 1
     42e:	80 e2       	ldi	r24, 0x20	; 32
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	91 83       	std	Z+1, r25	; 0x01
     434:	80 83       	st	Z, r24
     436:	be 01       	movw	r22, r28
     438:	60 5f       	subi	r22, 0xF0	; 240
     43a:	7f 4f       	sbci	r23, 0xFF	; 255
     43c:	c5 01       	movw	r24, r10
     43e:	af d5       	rcall	.+2910   	; 0xf9e <strcat>
				UART_voidTransmitString(dst_str,UART0);
     440:	ce 88       	ldd	r12, Y+22	; 0x16
     442:	df 88       	ldd	r13, Y+23	; 0x17
     444:	e8 8c       	ldd	r14, Y+24	; 0x18
     446:	f9 8c       	ldd	r15, Y+25	; 0x19
     448:	0a 8d       	ldd	r16, Y+26	; 0x1a
     44a:	1b 8d       	ldd	r17, Y+27	; 0x1b
     44c:	2c 8d       	ldd	r18, Y+28	; 0x1c
     44e:	3d 8d       	ldd	r19, Y+29	; 0x1d
     450:	4e 8d       	ldd	r20, Y+30	; 0x1e
     452:	5f 8d       	ldd	r21, Y+31	; 0x1f
     454:	68 a1       	ldd	r22, Y+32	; 0x20
     456:	c5 01       	movw	r24, r10
     458:	2f d3       	rcall	.+1630   	; 0xab8 <UART_voidTransmitString>
		
		
				UART_voidTransmitByte('\n',UART0) ;
     45a:	ce 88       	ldd	r12, Y+22	; 0x16
     45c:	df 88       	ldd	r13, Y+23	; 0x17
     45e:	e8 8c       	ldd	r14, Y+24	; 0x18
     460:	f9 8c       	ldd	r15, Y+25	; 0x19
     462:	0a 8d       	ldd	r16, Y+26	; 0x1a
     464:	1b 8d       	ldd	r17, Y+27	; 0x1b
     466:	2c 8d       	ldd	r18, Y+28	; 0x1c
     468:	3d 8d       	ldd	r19, Y+29	; 0x1d
     46a:	4e 8d       	ldd	r20, Y+30	; 0x1e
     46c:	5f 8d       	ldd	r21, Y+31	; 0x1f
     46e:	68 a1       	ldd	r22, Y+32	; 0x20
     470:	8a e0       	ldi	r24, 0x0A	; 10
     472:	f0 d2       	rcall	.+1504   	; 0xa54 <UART_voidTransmitByte>
     474:	8b ea       	ldi	r24, 0xAB	; 171
     476:	9d e0       	ldi	r25, 0x0D	; 13
     478:	01 97       	sbiw	r24, 0x01	; 1
     47a:	f1 f7       	brne	.-4      	; 0x478 <__stack+0x19>
	u8 angle =0;
	while(1){
		
		while(angle !=180){
			ultra_triger();
			HSERVO_voidGoToAngle(angle++);
     47c:	00 c0       	rjmp	.+0      	; 0x47e <__stack+0x1f>
	_delay_ms(10);
	
	u8 angle =0;
	while(1){
		
		while(angle !=180){
     47e:	00 00       	nop
     480:	19 2d       	mov	r17, r9
     482:	14 3b       	cpi	r17, 0xB4	; 180
     484:	09 f0       	breq	.+2      	; 0x488 <__stack+0x29>
				//	ultra_getangle(angle);
				_delay_ms(14);
			
		}
		while(angle !=0){
				ultra_triger();
     486:	9b cf       	rjmp	.-202    	; 0x3be <main+0x74>
     488:	53 c0       	rjmp	.+166    	; 0x530 <__stack+0xd1>
				HSERVO_voidGoToAngle(angle--);
     48a:	a1 de       	rcall	.-702    	; 0x1ce <ultra_triger>
     48c:	99 24       	eor	r9, r9
     48e:	9a 94       	dec	r9
     490:	91 0e       	add	r9, r17
     492:	81 2f       	mov	r24, r17
     494:	5e de       	rcall	.-836    	; 0x152 <HSERVO_voidGoToAngle>
			
				DST=ultra_getdist();
     496:	6e de       	rcall	.-804    	; 0x174 <ultra_getdist>
     498:	6b 01       	movw	r12, r22
     49a:	7c 01       	movw	r14, r24
     49c:	dc 01       	movw	r26, r24
				if (DST<4 || DST > 400 )DST=0; 
     49e:	cb 01       	movw	r24, r22
     4a0:	04 97       	sbiw	r24, 0x04	; 4
     4a2:	a1 09       	sbc	r26, r1
     4a4:	b1 09       	sbc	r27, r1
     4a6:	8d 38       	cpi	r24, 0x8D	; 141
     4a8:	91 40       	sbci	r25, 0x01	; 1
     4aa:	a1 05       	cpc	r26, r1
     4ac:	b1 05       	cpc	r27, r1
     4ae:	18 f0       	brcs	.+6      	; 0x4b6 <__stack+0x57>
     4b0:	c1 2c       	mov	r12, r1
     4b2:	d1 2c       	mov	r13, r1
     4b4:	76 01       	movw	r14, r12
     4b6:	4a e0       	ldi	r20, 0x0A	; 10
     4b8:	be 01       	movw	r22, r28
     4ba:	60 5f       	subi	r22, 0xF0	; 240
     4bc:	7f 4f       	sbci	r23, 0xFF	; 255
     4be:	89 2d       	mov	r24, r9
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	78 d5       	rcall	.+2800   	; 0xfb4 <__itoa_ncheck>
     4c4:	4a e0       	ldi	r20, 0x0A	; 10
     4c6:	ce 01       	movw	r24, r28
     4c8:	01 96       	adiw	r24, 0x01	; 1
     4ca:	5c 01       	movw	r10, r24
     4cc:	bc 01       	movw	r22, r24
     4ce:	c6 01       	movw	r24, r12
     4d0:	71 d5       	rcall	.+2786   	; 0xfb4 <__itoa_ncheck>
				itoa(angle,(char*)angle_str,10);
				itoa(DST,(char*)dst_str,10);
				strcat((char*)dst_str, " "); strcat((char*)dst_str,angle_str);
     4d2:	f5 01       	movw	r30, r10
     4d4:	01 90       	ld	r0, Z+
     4d6:	00 20       	and	r0, r0
     4d8:	e9 f7       	brne	.-6      	; 0x4d4 <__stack+0x75>
     4da:	31 97       	sbiw	r30, 0x01	; 1
     4dc:	80 e2       	ldi	r24, 0x20	; 32
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	91 83       	std	Z+1, r25	; 0x01
     4e2:	80 83       	st	Z, r24
     4e4:	be 01       	movw	r22, r28
     4e6:	60 5f       	subi	r22, 0xF0	; 240
     4e8:	7f 4f       	sbci	r23, 0xFF	; 255
     4ea:	c5 01       	movw	r24, r10
     4ec:	58 d5       	rcall	.+2736   	; 0xf9e <strcat>
				UART_voidTransmitString(dst_str,UART0);
     4ee:	ce 88       	ldd	r12, Y+22	; 0x16
     4f0:	df 88       	ldd	r13, Y+23	; 0x17
     4f2:	e8 8c       	ldd	r14, Y+24	; 0x18
     4f4:	f9 8c       	ldd	r15, Y+25	; 0x19
     4f6:	0a 8d       	ldd	r16, Y+26	; 0x1a
     4f8:	1b 8d       	ldd	r17, Y+27	; 0x1b
     4fa:	2c 8d       	ldd	r18, Y+28	; 0x1c
     4fc:	3d 8d       	ldd	r19, Y+29	; 0x1d
     4fe:	4e 8d       	ldd	r20, Y+30	; 0x1e
     500:	5f 8d       	ldd	r21, Y+31	; 0x1f
     502:	68 a1       	ldd	r22, Y+32	; 0x20
     504:	c5 01       	movw	r24, r10
     506:	d8 d2       	rcall	.+1456   	; 0xab8 <UART_voidTransmitString>
		
			
				UART_voidTransmitByte('\n',UART0) ;
     508:	ce 88       	ldd	r12, Y+22	; 0x16
     50a:	df 88       	ldd	r13, Y+23	; 0x17
     50c:	e8 8c       	ldd	r14, Y+24	; 0x18
     50e:	f9 8c       	ldd	r15, Y+25	; 0x19
     510:	0a 8d       	ldd	r16, Y+26	; 0x1a
     512:	1b 8d       	ldd	r17, Y+27	; 0x1b
     514:	2c 8d       	ldd	r18, Y+28	; 0x1c
     516:	3d 8d       	ldd	r19, Y+29	; 0x1d
     518:	4e 8d       	ldd	r20, Y+30	; 0x1e
     51a:	5f 8d       	ldd	r21, Y+31	; 0x1f
     51c:	68 a1       	ldd	r22, Y+32	; 0x20
     51e:	8a e0       	ldi	r24, 0x0A	; 10
     520:	99 d2       	rcall	.+1330   	; 0xa54 <UART_voidTransmitByte>
     522:	8b ea       	ldi	r24, 0xAB	; 171
     524:	9d e0       	ldi	r25, 0x0D	; 13
     526:	01 97       	sbiw	r24, 0x01	; 1
     528:	f1 f7       	brne	.-4      	; 0x526 <__stack+0xc7>
     52a:	00 c0       	rjmp	.+0      	; 0x52c <__stack+0xcd>
     52c:	00 00       	nop
     52e:	19 2d       	mov	r17, r9
				_delay_ms(14);
			
		}
		while(angle !=0){
				ultra_triger();
				HSERVO_voidGoToAngle(angle--);
     530:	11 11       	cpse	r17, r1
		
				//	ultra_getangle(angle);
				_delay_ms(14);
			
		}
		while(angle !=0){
     532:	ab cf       	rjmp	.-170    	; 0x48a <__stack+0x2b>
     534:	a6 cf       	rjmp	.-180    	; 0x482 <__stack+0x23>

00000536 <PGPIO_PORT_tPtr_GetRegister>:

#include "GPIO_interface.h"
#include "GPIO_private.h"

PORT_t* PGPIO_PORT_tPtr_GetRegister(enum PortID_t PortID){
	switch(PortID)
     536:	81 30       	cpi	r24, 0x01	; 1
     538:	91 f0       	breq	.+36     	; 0x55e <PGPIO_PORT_tPtr_GetRegister+0x28>
     53a:	28 f0       	brcs	.+10     	; 0x546 <PGPIO_PORT_tPtr_GetRegister+0x10>
     53c:	82 30       	cpi	r24, 0x02	; 2
     53e:	31 f0       	breq	.+12     	; 0x54c <PGPIO_PORT_tPtr_GetRegister+0x16>
     540:	83 30       	cpi	r24, 0x03	; 3
     542:	39 f0       	breq	.+14     	; 0x552 <PGPIO_PORT_tPtr_GetRegister+0x1c>
     544:	09 c0       	rjmp	.+18     	; 0x558 <PGPIO_PORT_tPtr_GetRegister+0x22>
	{
		case GPIO_PORTA:
			return PORTA_REG;
     546:	89 e3       	ldi	r24, 0x39	; 57
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	08 95       	ret
		case GPIO_PORTB:
			return PORTB_REG;
		case GPIO_PORTC:
			return PORTC_REG;
     54c:	83 e3       	ldi	r24, 0x33	; 51
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	08 95       	ret
		case GPIO_PORTD:
			return PORTD_REG;
     552:	80 e3       	ldi	r24, 0x30	; 48
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	08 95       	ret
		default:
			return 0;
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	08 95       	ret
	switch(PortID)
	{
		case GPIO_PORTA:
			return PORTA_REG;
		case GPIO_PORTB:
			return PORTB_REG;
     55e:	86 e3       	ldi	r24, 0x36	; 54
     560:	90 e0       	ldi	r25, 0x00	; 0
		case GPIO_PORTD:
			return PORTD_REG;
		default:
			return 0;
	}
}
     562:	08 95       	ret

00000564 <MGPIO_voidSetPinDirection>:

void MGPIO_voidSetPinDirection (enum PortID_t PortID, u8 PinNumber, enum Direction_t Dircection)
{
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	d6 2f       	mov	r29, r22
     56a:	c4 2f       	mov	r28, r20
	PORT_t * p =0;
	p =PGPIO_PORT_tPtr_GetRegister(PortID);
     56c:	e4 df       	rcall	.-56     	; 0x536 <PGPIO_PORT_tPtr_GetRegister>
     56e:	fc 01       	movw	r30, r24
	if (Dircection == GPIO_INPUT){
     570:	c1 11       	cpse	r28, r1
     572:	0f c0       	rjmp	.+30     	; 0x592 <MGPIO_voidSetPinDirection+0x2e>
		CLR_bit(p->DDR,PinNumber);
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	02 c0       	rjmp	.+4      	; 0x57e <MGPIO_voidSetPinDirection+0x1a>
     57a:	88 0f       	add	r24, r24
     57c:	99 1f       	adc	r25, r25
     57e:	da 95       	dec	r29
     580:	e2 f7       	brpl	.-8      	; 0x57a <MGPIO_voidSetPinDirection+0x16>
     582:	80 95       	com	r24
     584:	91 81       	ldd	r25, Z+1	; 0x01
     586:	98 23       	and	r25, r24
     588:	91 83       	std	Z+1, r25	; 0x01
		CLR_bit(p->PORT,PinNumber);
     58a:	92 81       	ldd	r25, Z+2	; 0x02
     58c:	89 23       	and	r24, r25
     58e:	82 83       	std	Z+2, r24	; 0x02
     590:	22 c0       	rjmp	.+68     	; 0x5d6 <MGPIO_voidSetPinDirection+0x72>
	}
	else if(Dircection ==GPIO_OUTPUT){
     592:	c1 30       	cpi	r28, 0x01	; 1
     594:	79 f4       	brne	.+30     	; 0x5b4 <MGPIO_voidSetPinDirection+0x50>
		SET_bit(p->DDR,PinNumber);
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	02 c0       	rjmp	.+4      	; 0x5a0 <MGPIO_voidSetPinDirection+0x3c>
     59c:	88 0f       	add	r24, r24
     59e:	99 1f       	adc	r25, r25
     5a0:	da 95       	dec	r29
     5a2:	e2 f7       	brpl	.-8      	; 0x59c <MGPIO_voidSetPinDirection+0x38>
     5a4:	91 81       	ldd	r25, Z+1	; 0x01
     5a6:	98 2b       	or	r25, r24
     5a8:	91 83       	std	Z+1, r25	; 0x01
		CLR_bit(p->PORT,PinNumber);
     5aa:	80 95       	com	r24
     5ac:	92 81       	ldd	r25, Z+2	; 0x02
     5ae:	89 23       	and	r24, r25
     5b0:	82 83       	std	Z+2, r24	; 0x02
     5b2:	11 c0       	rjmp	.+34     	; 0x5d6 <MGPIO_voidSetPinDirection+0x72>
	}
	else if(Dircection == GPIO_INPUT_PULLUP){
     5b4:	c2 30       	cpi	r28, 0x02	; 2
     5b6:	79 f4       	brne	.+30     	; 0x5d6 <MGPIO_voidSetPinDirection+0x72>
		CLR_bit(p->DDR,PinNumber);
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <MGPIO_voidSetPinDirection+0x5e>
     5be:	88 0f       	add	r24, r24
     5c0:	99 1f       	adc	r25, r25
     5c2:	da 95       	dec	r29
     5c4:	e2 f7       	brpl	.-8      	; 0x5be <MGPIO_voidSetPinDirection+0x5a>
     5c6:	98 2f       	mov	r25, r24
     5c8:	90 95       	com	r25
     5ca:	21 81       	ldd	r18, Z+1	; 0x01
     5cc:	92 23       	and	r25, r18
     5ce:	91 83       	std	Z+1, r25	; 0x01
		SET_bit(p->PORT,PinNumber);
     5d0:	92 81       	ldd	r25, Z+2	; 0x02
     5d2:	89 2b       	or	r24, r25
     5d4:	82 83       	std	Z+2, r24	; 0x02
	}
}
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	08 95       	ret

000005dc <MGPIO_voidSetPinValue>:
void MGPIO_voidSetPinValue(enum PortID_t PortID, u8 PinNumber, enum GPIO_State_t Value)
{
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	d6 2f       	mov	r29, r22
     5e2:	c4 2f       	mov	r28, r20
	PORT_t* p =PGPIO_PORT_tPtr_GetRegister(PortID);
     5e4:	a8 df       	rcall	.-176    	; 0x536 <PGPIO_PORT_tPtr_GetRegister>
	if (Value == GPIO_LOW)
     5e6:	c1 11       	cpse	r28, r1
     5e8:	0d c0       	rjmp	.+26     	; 0x604 <MGPIO_voidSetPinValue+0x28>
		CLR_bit(p->PORT,PinNumber);
     5ea:	21 e0       	ldi	r18, 0x01	; 1
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <MGPIO_voidSetPinValue+0x18>
     5f0:	22 0f       	add	r18, r18
     5f2:	33 1f       	adc	r19, r19
     5f4:	da 95       	dec	r29
     5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <MGPIO_voidSetPinValue+0x14>
     5f8:	20 95       	com	r18
     5fa:	fc 01       	movw	r30, r24
     5fc:	32 81       	ldd	r19, Z+2	; 0x02
     5fe:	23 23       	and	r18, r19
     600:	22 83       	std	Z+2, r18	; 0x02
     602:	0d c0       	rjmp	.+26     	; 0x61e <MGPIO_voidSetPinValue+0x42>
	else if(Value == GPIO_HIGH)
     604:	c1 30       	cpi	r28, 0x01	; 1
     606:	59 f4       	brne	.+22     	; 0x61e <MGPIO_voidSetPinValue+0x42>
		SET_bit(p->PORT,PinNumber);
     608:	21 e0       	ldi	r18, 0x01	; 1
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	02 c0       	rjmp	.+4      	; 0x612 <MGPIO_voidSetPinValue+0x36>
     60e:	22 0f       	add	r18, r18
     610:	33 1f       	adc	r19, r19
     612:	da 95       	dec	r29
     614:	e2 f7       	brpl	.-8      	; 0x60e <MGPIO_voidSetPinValue+0x32>
     616:	fc 01       	movw	r30, r24
     618:	32 81       	ldd	r19, Z+2	; 0x02
     61a:	23 2b       	or	r18, r19
     61c:	22 83       	std	Z+2, r18	; 0x02
}
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	08 95       	ret

00000624 <timer0_init>:
* Return Value: Nothing.
***********************************************************************/
void timer0_init(void)
{
	    	/* Disable Timer 0 */
	    	TCCR0 = DISABLE_MODULE_VALUE;
     624:	13 be       	out	0x33, r1	; 51
	    	/* Setting pre scaler */
	    	TCCR0 = (PRESCLR1_VALUE);
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	83 bf       	out	0x33, r24	; 51
	    	/* Initializing the timer with zero */
	    	TCNT0 = ZER0_INITIALIZER;
     62a:	12 be       	out	0x32, r1	; 50
				/* Timer overflow interrupt enable*/
				TIMSK |=(1<<TOIE0);
     62c:	89 b7       	in	r24, 0x39	; 57
     62e:	81 60       	ori	r24, 0x01	; 1
     630:	89 bf       	out	0x39, r24	; 57
     632:	08 95       	ret

00000634 <MTIM2_voidInit>:

void MTIM0_voidSetCallBack(TIM2Interrupt Interrrupt, void(*CallBack)(void))
{
	if(Interrrupt >1)
		return;
	PTIM2CallBacks[Interrrupt] = CallBack;
     634:	15 bc       	out	0x25, r1	; 37
     636:	24 bd       	out	0x24, r18	; 36
     638:	13 bc       	out	0x23, r1	; 35
     63a:	99 b7       	in	r25, 0x39	; 57
     63c:	9c 7f       	andi	r25, 0xFC	; 252
     63e:	99 bf       	out	0x39, r25	; 57
     640:	a6 2f       	mov	r26, r22
     642:	a1 70       	andi	r26, 0x01	; 1
     644:	b0 e0       	ldi	r27, 0x00	; 0
     646:	00 24       	eor	r0, r0
     648:	b6 95       	lsr	r27
     64a:	a7 95       	ror	r26
     64c:	07 94       	ror	r0
     64e:	b6 95       	lsr	r27
     650:	a7 95       	ror	r26
     652:	07 94       	ror	r0
     654:	ba 2f       	mov	r27, r26
     656:	a0 2d       	mov	r26, r0
     658:	61 fb       	bst	r22, 1
     65a:	ee 27       	eor	r30, r30
     65c:	e0 f9       	bld	r30, 0
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	ee 0f       	add	r30, r30
     662:	ff 1f       	adc	r31, r31
     664:	ee 0f       	add	r30, r30
     666:	ff 1f       	adc	r31, r31
     668:	ee 0f       	add	r30, r30
     66a:	ff 1f       	adc	r31, r31
     66c:	90 e1       	ldi	r25, 0x10	; 16
     66e:	49 9f       	mul	r20, r25
     670:	a0 01       	movw	r20, r0
     672:	11 24       	eor	r1, r1
     674:	ea 2b       	or	r30, r26
     676:	4e 2b       	or	r20, r30
     678:	48 2b       	or	r20, r24
     67a:	45 bd       	out	0x25, r20	; 37
     67c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <PTIM2ClockSource>
     680:	08 95       	ret

00000682 <MTIM2_voidSetDutyCycle>:
     682:	83 bd       	out	0x23, r24	; 35
     684:	08 95       	ret

00000686 <__vector_4>:
}

void TIM2_ISR_VECTOR_OVERFLOW(void)
{
     686:	1f 92       	push	r1
     688:	0f 92       	push	r0
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	0f 92       	push	r0
     68e:	11 24       	eor	r1, r1
     690:	2f 93       	push	r18
     692:	3f 93       	push	r19
     694:	4f 93       	push	r20
     696:	5f 93       	push	r21
     698:	6f 93       	push	r22
     69a:	7f 93       	push	r23
     69c:	8f 93       	push	r24
     69e:	9f 93       	push	r25
     6a0:	af 93       	push	r26
     6a2:	bf 93       	push	r27
     6a4:	ef 93       	push	r30
     6a6:	ff 93       	push	r31
	if(PTIM2CallBacks[0] != 0)
     6a8:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <PTIM2CallBacks>
     6ac:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <PTIM2CallBacks+0x1>
     6b0:	30 97       	sbiw	r30, 0x00	; 0
     6b2:	09 f0       	breq	.+2      	; 0x6b6 <__vector_4+0x30>
	{
		PTIM2CallBacks[0]();
     6b4:	09 95       	icall
	}
	SET_bit(TIFR_REG,0);
     6b6:	88 b7       	in	r24, 0x38	; 56
     6b8:	81 60       	ori	r24, 0x01	; 1
     6ba:	88 bf       	out	0x38, r24	; 56
}
     6bc:	ff 91       	pop	r31
     6be:	ef 91       	pop	r30
     6c0:	bf 91       	pop	r27
     6c2:	af 91       	pop	r26
     6c4:	9f 91       	pop	r25
     6c6:	8f 91       	pop	r24
     6c8:	7f 91       	pop	r23
     6ca:	6f 91       	pop	r22
     6cc:	5f 91       	pop	r21
     6ce:	4f 91       	pop	r20
     6d0:	3f 91       	pop	r19
     6d2:	2f 91       	pop	r18
     6d4:	0f 90       	pop	r0
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	0f 90       	pop	r0
     6da:	1f 90       	pop	r1
     6dc:	18 95       	reti

000006de <__vector_3>:
void TIM2_ISR_VECTOR_COMPARE(void)
{
     6de:	1f 92       	push	r1
     6e0:	0f 92       	push	r0
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	0f 92       	push	r0
     6e6:	11 24       	eor	r1, r1
     6e8:	2f 93       	push	r18
     6ea:	3f 93       	push	r19
     6ec:	4f 93       	push	r20
     6ee:	5f 93       	push	r21
     6f0:	6f 93       	push	r22
     6f2:	7f 93       	push	r23
     6f4:	8f 93       	push	r24
     6f6:	9f 93       	push	r25
     6f8:	af 93       	push	r26
     6fa:	bf 93       	push	r27
     6fc:	ef 93       	push	r30
     6fe:	ff 93       	push	r31
	if(PTIM2CallBacks[1] != 0)
     700:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <PTIM2CallBacks+0x2>
     704:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <PTIM2CallBacks+0x3>
     708:	30 97       	sbiw	r30, 0x00	; 0
     70a:	09 f0       	breq	.+2      	; 0x70e <__vector_3+0x30>
	{
		PTIM2CallBacks[1]();
     70c:	09 95       	icall
	}
	SET_bit(TIFR_REG,1);
     70e:	88 b7       	in	r24, 0x38	; 56
     710:	82 60       	ori	r24, 0x02	; 2
     712:	88 bf       	out	0x38, r24	; 56
     714:	ff 91       	pop	r31
     716:	ef 91       	pop	r30
     718:	bf 91       	pop	r27
     71a:	af 91       	pop	r26
     71c:	9f 91       	pop	r25
     71e:	8f 91       	pop	r24
     720:	7f 91       	pop	r23
     722:	6f 91       	pop	r22
     724:	5f 91       	pop	r21
     726:	4f 91       	pop	r20
     728:	3f 91       	pop	r19
     72a:	2f 91       	pop	r18
     72c:	0f 90       	pop	r0
     72e:	0f be       	out	0x3f, r0	; 63
     730:	0f 90       	pop	r0
     732:	1f 90       	pop	r1
     734:	18 95       	reti

00000736 <UART_voidEnablemode>:
#include "UART_private.h"
#include "UART_config.h"

void UART_voidEnablemode(enum UART_mode Local_Enable_mode)
{
	switch(Local_Enable_mode)
     736:	82 30       	cpi	r24, 0x02	; 2
     738:	41 f0       	breq	.+16     	; 0x74a <UART_voidEnablemode+0x14>
     73a:	83 30       	cpi	r24, 0x03	; 3
     73c:	51 f0       	breq	.+20     	; 0x752 <UART_voidEnablemode+0x1c>
     73e:	81 30       	cpi	r24, 0x01	; 1
     740:	71 f4       	brne	.+28     	; 0x75e <UART_voidEnablemode+0x28>
	{
		case UART_Disable: // UCSRA Temp bit of Tx and Rx enable = 0
			break;
		case UART_Tx:
			SET_bit(UCSRB_REG, 3); // UCSRB Temp bit of Tx enable = 1
     742:	8a b1       	in	r24, 0x0a	; 10
     744:	88 60       	ori	r24, 0x08	; 8
     746:	8a b9       	out	0x0a, r24	; 10
			break;
     748:	08 95       	ret
		case UART_Rx:
			SET_bit(UCSRB_REG, 4); // UCSRB Temp bit of Rx enable = 1
     74a:	8a b1       	in	r24, 0x0a	; 10
     74c:	80 61       	ori	r24, 0x10	; 16
     74e:	8a b9       	out	0x0a, r24	; 10
			break;
     750:	08 95       	ret
		case UART_Tx_or_Rx:
			SET_bit(UCSRB_REG, 3); // UCSRB Temp bit of Tx enable = 1
     752:	8a b1       	in	r24, 0x0a	; 10
     754:	88 60       	ori	r24, 0x08	; 8
     756:	8a b9       	out	0x0a, r24	; 10
			SET_bit(UCSRB_REG, 4); // UCSRB Temp bit of Rx enable = 1
     758:	8a b1       	in	r24, 0x0a	; 10
     75a:	80 61       	ori	r24, 0x10	; 16
     75c:	8a b9       	out	0x0a, r24	; 10
     75e:	08 95       	ret

00000760 <UART_floatU2Xmode>:
			break;
	}
}

float UART_floatU2Xmode(enum UART_U2X_Options Local_U2X_mode, u32 Local_Baud_Rate, enum UART_ClockPolarity Local_Clock_polarity)
{
     760:	cf 93       	push	r28
     762:	c2 2f       	mov	r28, r18
	float UBRR_Temp = 0.0;
	switch(Local_U2X_mode)
     764:	81 30       	cpi	r24, 0x01	; 1
     766:	29 f1       	breq	.+74     	; 0x7b2 <UART_floatU2Xmode+0x52>
     768:	20 f0       	brcs	.+8      	; 0x772 <UART_floatU2Xmode+0x12>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	09 f4       	brne	.+2      	; 0x770 <UART_floatU2Xmode+0x10>
     76e:	41 c0       	rjmp	.+130    	; 0x7f2 <UART_floatU2Xmode+0x92>
     770:	67 c0       	rjmp	.+206    	; 0x840 <UART_floatU2Xmode+0xe0>
	{
		case UART_Async_NormalSpeed:
			CLR_bit(UCSRC_REG, 6); // UCSRC Temp bit of UMSEL = 0 means Asynchronous
     772:	80 b5       	in	r24, 0x20	; 32
     774:	8f 7b       	andi	r24, 0xBF	; 191
     776:	80 bd       	out	0x20, r24	; 32
			CLR_bit(UCSRA_REG, 1); // UCSRA Temp bit of U2X = 0
     778:	8b b1       	in	r24, 0x0b	; 11
     77a:	8d 7f       	andi	r24, 0xFD	; 253
     77c:	8b b9       	out	0x0b, r24	; 11
			UBRR_Temp = ((float)F_CPU / (16.0 * Local_Baud_Rate)) - 1 + 0.5; // +0.5 for rounding
     77e:	cb 01       	movw	r24, r22
     780:	ba 01       	movw	r22, r20
     782:	e5 d2       	rcall	.+1482   	; 0xd4e <__floatunsisf>
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	40 e8       	ldi	r20, 0x80	; 128
     78a:	51 e4       	ldi	r21, 0x41	; 65
     78c:	6e d3       	rcall	.+1756   	; 0xe6a <__mulsf3>
     78e:	9b 01       	movw	r18, r22
     790:	ac 01       	movw	r20, r24
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	74 e2       	ldi	r23, 0x24	; 36
     796:	84 e7       	ldi	r24, 0x74	; 116
     798:	99 e4       	ldi	r25, 0x49	; 73
     79a:	45 d2       	rcall	.+1162   	; 0xc26 <__divsf3>
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	40 e8       	ldi	r20, 0x80	; 128
     7a2:	5f e3       	ldi	r21, 0x3F	; 63
     7a4:	db d1       	rcall	.+950    	; 0xb5c <__subsf3>
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	40 e0       	ldi	r20, 0x00	; 0
     7ac:	5f e3       	ldi	r21, 0x3F	; 63
     7ae:	d7 d1       	rcall	.+942    	; 0xb5e <__addsf3>
			break;
     7b0:	4a c0       	rjmp	.+148    	; 0x846 <UART_floatU2Xmode+0xe6>
		case UART_Async_DoubleSpeed:
			CLR_bit(UCSRC_REG, 6); // UCSRC Temp bit of UMSEL = 0 means Asynchronous
     7b2:	80 b5       	in	r24, 0x20	; 32
     7b4:	8f 7b       	andi	r24, 0xBF	; 191
     7b6:	80 bd       	out	0x20, r24	; 32
			SET_bit(UCSRA_REG, 1); // UCSRA Temp bit of U2X = 1
     7b8:	8b b1       	in	r24, 0x0b	; 11
     7ba:	82 60       	ori	r24, 0x02	; 2
			UBRR_Temp = ((float)F_CPU / (8.0 * Local_Baud_Rate)) - 1 + 0.5;
     7bc:	8b b9       	out	0x0b, r24	; 11
     7be:	cb 01       	movw	r24, r22
     7c0:	ba 01       	movw	r22, r20
     7c2:	c5 d2       	rcall	.+1418   	; 0xd4e <__floatunsisf>
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	40 e0       	ldi	r20, 0x00	; 0
     7ca:	51 e4       	ldi	r21, 0x41	; 65
     7cc:	4e d3       	rcall	.+1692   	; 0xe6a <__mulsf3>
     7ce:	9b 01       	movw	r18, r22
     7d0:	ac 01       	movw	r20, r24
     7d2:	60 e0       	ldi	r22, 0x00	; 0
     7d4:	74 e2       	ldi	r23, 0x24	; 36
     7d6:	84 e7       	ldi	r24, 0x74	; 116
     7d8:	99 e4       	ldi	r25, 0x49	; 73
     7da:	25 d2       	rcall	.+1098   	; 0xc26 <__divsf3>
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	40 e8       	ldi	r20, 0x80	; 128
     7e2:	5f e3       	ldi	r21, 0x3F	; 63
     7e4:	bb d1       	rcall	.+886    	; 0xb5c <__subsf3>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	5f e3       	ldi	r21, 0x3F	; 63
     7ee:	b7 d1       	rcall	.+878    	; 0xb5e <__addsf3>
			break;
     7f0:	2a c0       	rjmp	.+84     	; 0x846 <UART_floatU2Xmode+0xe6>
		case UART_sync:
			SET_bit(UCSRC_REG, 6); // UCSRC Temp bit of UMSEL = 1 means Synchronous
     7f2:	80 b5       	in	r24, 0x20	; 32
     7f4:	80 64       	ori	r24, 0x40	; 64
     7f6:	80 bd       	out	0x20, r24	; 32
			UBRR_Temp = ((float)F_CPU / (2.0 * Local_Baud_Rate)) - 1 + 0.5;
     7f8:	cb 01       	movw	r24, r22
     7fa:	ba 01       	movw	r22, r20
     7fc:	a8 d2       	rcall	.+1360   	; 0xd4e <__floatunsisf>
     7fe:	9b 01       	movw	r18, r22
     800:	ac 01       	movw	r20, r24
     802:	ad d1       	rcall	.+858    	; 0xb5e <__addsf3>
     804:	9b 01       	movw	r18, r22
     806:	ac 01       	movw	r20, r24
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	74 e2       	ldi	r23, 0x24	; 36
     80c:	84 e7       	ldi	r24, 0x74	; 116
     80e:	99 e4       	ldi	r25, 0x49	; 73
     810:	0a d2       	rcall	.+1044   	; 0xc26 <__divsf3>
     812:	20 e0       	ldi	r18, 0x00	; 0
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	40 e8       	ldi	r20, 0x80	; 128
     818:	5f e3       	ldi	r21, 0x3F	; 63
     81a:	a0 d1       	rcall	.+832    	; 0xb5c <__subsf3>
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	5f e3       	ldi	r21, 0x3F	; 63
     824:	9c d1       	rcall	.+824    	; 0xb5e <__addsf3>
     826:	cc 23       	and	r28, r28
     828:	19 f0       	breq	.+6      	; 0x830 <UART_floatU2Xmode+0xd0>
			switch(Local_Clock_polarity)
     82a:	c1 30       	cpi	r28, 0x01	; 1
     82c:	29 f0       	breq	.+10     	; 0x838 <UART_floatU2Xmode+0xd8>
     82e:	0b c0       	rjmp	.+22     	; 0x846 <UART_floatU2Xmode+0xe6>
     830:	20 b5       	in	r18, 0x20	; 32
     832:	2e 7f       	andi	r18, 0xFE	; 254
			{
				case UART_FallingEdge:
					CLR_bit(UCSRC_REG, 0); // UCPOL = 0
     834:	20 bd       	out	0x20, r18	; 32
     836:	07 c0       	rjmp	.+14     	; 0x846 <UART_floatU2Xmode+0xe6>
     838:	20 b5       	in	r18, 0x20	; 32
					break;
     83a:	21 60       	ori	r18, 0x01	; 1
				case UART_RisingEdge:
					SET_bit(UCSRC_REG, 0); // UCPOL = 1
     83c:	20 bd       	out	0x20, r18	; 32
     83e:	03 c0       	rjmp	.+6      	; 0x846 <UART_floatU2Xmode+0xe6>
     840:	60 e0       	ldi	r22, 0x00	; 0
					break;
     842:	70 e0       	ldi	r23, 0x00	; 0
	}
}

float UART_floatU2Xmode(enum UART_U2X_Options Local_U2X_mode, u32 Local_Baud_Rate, enum UART_ClockPolarity Local_Clock_polarity)
{
	float UBRR_Temp = 0.0;
     844:	cb 01       	movw	r24, r22
     846:	cf 91       	pop	r28
     848:	08 95       	ret

0000084a <UART_voidMPCMmode>:
			break;
		default:
			break;
	}
	return UBRR_Temp;
}
     84a:	88 23       	and	r24, r24
     84c:	19 f0       	breq	.+6      	; 0x854 <UART_voidMPCMmode+0xa>

void UART_voidMPCMmode(enum UART_MPCM_Options Local_MPCM_mode)
{
	switch(Local_MPCM_mode)
     84e:	81 30       	cpi	r24, 0x01	; 1
     850:	29 f0       	breq	.+10     	; 0x85c <UART_voidMPCMmode+0x12>
     852:	08 95       	ret
	{
		case UART_Single:
			CLR_bit(UCSRA_REG, 0); // MPCM = 0 means Single processor
     854:	8b b1       	in	r24, 0x0b	; 11
     856:	8e 7f       	andi	r24, 0xFE	; 254
     858:	8b b9       	out	0x0b, r24	; 11
			break;
     85a:	08 95       	ret
		case UART_Multi:
			SET_bit(UCSRA_REG, 0); // MPCM = 1 means Multi processor
     85c:	8b b1       	in	r24, 0x0b	; 11
     85e:	81 60       	ori	r24, 0x01	; 1
     860:	8b b9       	out	0x0b, r24	; 11
     862:	08 95       	ret

00000864 <UART_voidInterruptmode>:
	}
}

void UART_voidInterruptmode(enum UART_InterruptMode Local_Interrupt_mode)
{
	switch(Local_Interrupt_mode)
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	fc 01       	movw	r30, r24
     868:	31 97       	sbiw	r30, 0x01	; 1
     86a:	e7 30       	cpi	r30, 0x07	; 7
     86c:	f1 05       	cpc	r31, r1
     86e:	68 f5       	brcc	.+90     	; 0x8ca <UART_voidInterruptmode+0x66>
     870:	e6 5d       	subi	r30, 0xD6	; 214
     872:	ff 4f       	sbci	r31, 0xFF	; 255
     874:	7f c3       	rjmp	.+1790   	; 0xf74 <__tablejump2__>
	{
		case UART_InterruptDisable:
			break;
		case UART_RxInterruptEnable:
			SET_bit(UCSRB_REG, 7); // Enable Rx interrupt
     876:	8a b1       	in	r24, 0x0a	; 10
     878:	80 68       	ori	r24, 0x80	; 128
     87a:	8a b9       	out	0x0a, r24	; 10
			break;
     87c:	08 95       	ret
		case UART_TxInterruptEnable:
			SET_bit(UCSRB_REG, 6); // Enable Tx interrupt
     87e:	8a b1       	in	r24, 0x0a	; 10
     880:	80 64       	ori	r24, 0x40	; 64
     882:	8a b9       	out	0x0a, r24	; 10
			break;
     884:	08 95       	ret
		case UART_UDRInterruptEnable:
			SET_bit(UCSRB_REG, 5); // Enable UDR interrupt
     886:	8a b1       	in	r24, 0x0a	; 10
     888:	80 62       	ori	r24, 0x20	; 32
     88a:	8a b9       	out	0x0a, r24	; 10
			break;
     88c:	08 95       	ret
		case UART_Tx_Rx_InterruptEnable:
			SET_bit(UCSRB_REG, 7); // Enable Rx interrupt
     88e:	8a b1       	in	r24, 0x0a	; 10
     890:	80 68       	ori	r24, 0x80	; 128
     892:	8a b9       	out	0x0a, r24	; 10
			SET_bit(UCSRB_REG, 6); // Enable Tx interrupt
     894:	8a b1       	in	r24, 0x0a	; 10
     896:	80 64       	ori	r24, 0x40	; 64
     898:	8a b9       	out	0x0a, r24	; 10
			break;
     89a:	08 95       	ret
		case UART_Tx_UDR_InterruptEnable:
			SET_bit(UCSRB_REG, 6); // Enable Tx interrupt
     89c:	8a b1       	in	r24, 0x0a	; 10
     89e:	80 64       	ori	r24, 0x40	; 64
     8a0:	8a b9       	out	0x0a, r24	; 10
			SET_bit(UCSRB_REG, 5); // Enable UDR interrupt
     8a2:	8a b1       	in	r24, 0x0a	; 10
     8a4:	80 62       	ori	r24, 0x20	; 32
     8a6:	8a b9       	out	0x0a, r24	; 10
			break;
     8a8:	08 95       	ret
		case UART_Rx_UDR_InterruptEnable:
			SET_bit(UCSRB_REG, 7); // Enable Rx interrupt
     8aa:	8a b1       	in	r24, 0x0a	; 10
     8ac:	80 68       	ori	r24, 0x80	; 128
     8ae:	8a b9       	out	0x0a, r24	; 10
			SET_bit(UCSRB_REG, 5); // Enable UDR interrupt
     8b0:	8a b1       	in	r24, 0x0a	; 10
     8b2:	80 62       	ori	r24, 0x20	; 32
     8b4:	8a b9       	out	0x0a, r24	; 10
			break;
     8b6:	08 95       	ret
		case UART_Tx_Rx_UDR_InterruptEnable:
			SET_bit(UCSRB_REG, 7); // Enable Rx interrupt
     8b8:	8a b1       	in	r24, 0x0a	; 10
     8ba:	80 68       	ori	r24, 0x80	; 128
     8bc:	8a b9       	out	0x0a, r24	; 10
			SET_bit(UCSRB_REG, 6); // Enable Tx interrupt
     8be:	8a b1       	in	r24, 0x0a	; 10
     8c0:	80 64       	ori	r24, 0x40	; 64
     8c2:	8a b9       	out	0x0a, r24	; 10
			SET_bit(UCSRB_REG, 5); // Enable UDR interrupt
     8c4:	8a b1       	in	r24, 0x0a	; 10
     8c6:	80 62       	ori	r24, 0x20	; 32
     8c8:	8a b9       	out	0x0a, r24	; 10
     8ca:	08 95       	ret

000008cc <UART_voidDataFrame>:
	}
}

void UART_voidDataFrame(enum UART_DataFrame Local_Data_Frame)
{
	switch(Local_Data_Frame)
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	c9 f0       	breq	.+50     	; 0x902 <UART_voidDataFrame+0x36>
     8d0:	28 f4       	brcc	.+10     	; 0x8dc <UART_voidDataFrame+0x10>
     8d2:	88 23       	and	r24, r24
     8d4:	41 f0       	breq	.+16     	; 0x8e6 <UART_voidDataFrame+0x1a>
     8d6:	81 30       	cpi	r24, 0x01	; 1
     8d8:	81 f0       	breq	.+32     	; 0x8fa <UART_voidDataFrame+0x2e>
     8da:	08 95       	ret
     8dc:	83 30       	cpi	r24, 0x03	; 3
     8de:	a9 f0       	breq	.+42     	; 0x90a <UART_voidDataFrame+0x3e>
     8e0:	84 30       	cpi	r24, 0x04	; 4
     8e2:	d1 f0       	breq	.+52     	; 0x918 <UART_voidDataFrame+0x4c>
     8e4:	08 95       	ret
	{
		case UART_5bitData:
			CLR_bit(UCSRB_REG, 2); // UCSZ2 = 0
     8e6:	8a b1       	in	r24, 0x0a	; 10
     8e8:	8b 7f       	andi	r24, 0xFB	; 251
     8ea:	8a b9       	out	0x0a, r24	; 10
			CLR_bit(UCSRC_REG, 2); // UCSZ1 = 0
     8ec:	80 b5       	in	r24, 0x20	; 32
     8ee:	8b 7f       	andi	r24, 0xFB	; 251
     8f0:	80 bd       	out	0x20, r24	; 32
			CLR_bit(UCSRC_REG, 1); // UCSZ0 = 0
     8f2:	80 b5       	in	r24, 0x20	; 32
     8f4:	8d 7f       	andi	r24, 0xFD	; 253
     8f6:	80 bd       	out	0x20, r24	; 32
			break;
     8f8:	08 95       	ret
		case UART_6bitData:
			SET_bit(UCSRC_REG, 1); // UCSZ0 = 1
     8fa:	80 b5       	in	r24, 0x20	; 32
     8fc:	82 60       	ori	r24, 0x02	; 2
     8fe:	80 bd       	out	0x20, r24	; 32
			break;
     900:	08 95       	ret
		case UART_7bitData:
			SET_bit(UCSRC_REG, 2); // UCSZ1 = 1
     902:	80 b5       	in	r24, 0x20	; 32
     904:	84 60       	ori	r24, 0x04	; 4
     906:	80 bd       	out	0x20, r24	; 32
			break;
     908:	08 95       	ret
		case UART_8bitData:
			SET_bit(UCSRC_REG, 1); // UCSZ0 = 1
     90a:	80 b5       	in	r24, 0x20	; 32
     90c:	82 60       	ori	r24, 0x02	; 2
     90e:	80 bd       	out	0x20, r24	; 32
			SET_bit(UCSRC_REG, 2); // UCSZ1 = 1
     910:	80 b5       	in	r24, 0x20	; 32
     912:	84 60       	ori	r24, 0x04	; 4
     914:	80 bd       	out	0x20, r24	; 32
			break;
     916:	08 95       	ret
		case UART_9bitData:
			SET_bit(UCSRC_REG, 1); // UCSZ0 = 1
     918:	80 b5       	in	r24, 0x20	; 32
     91a:	82 60       	ori	r24, 0x02	; 2
     91c:	80 bd       	out	0x20, r24	; 32
			SET_bit(UCSRC_REG, 2); // UCSZ1 = 1
     91e:	80 b5       	in	r24, 0x20	; 32
     920:	84 60       	ori	r24, 0x04	; 4
     922:	80 bd       	out	0x20, r24	; 32
			SET_bit(UCSRB_REG, 2); // UCSZ2 = 1
     924:	8a b1       	in	r24, 0x0a	; 10
     926:	84 60       	ori	r24, 0x04	; 4
     928:	8a b9       	out	0x0a, r24	; 10
     92a:	08 95       	ret

0000092c <UART_voidParity_Stopmode>:
	}
}

void UART_voidParity_Stopmode(enum UART_Parity_and_Stop_Mode Local_Control_Frame)
{
	switch(Local_Control_Frame)
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	01 f1       	breq	.+64     	; 0x970 <UART_voidParity_Stopmode+0x44>
     930:	28 f4       	brcc	.+10     	; 0x93c <UART_voidParity_Stopmode+0x10>
     932:	88 23       	and	r24, r24
     934:	49 f0       	breq	.+18     	; 0x948 <UART_voidParity_Stopmode+0x1c>
     936:	81 30       	cpi	r24, 0x01	; 1
     938:	89 f0       	breq	.+34     	; 0x95c <UART_voidParity_Stopmode+0x30>
     93a:	08 95       	ret
     93c:	84 30       	cpi	r24, 0x04	; 4
     93e:	61 f1       	breq	.+88     	; 0x998 <UART_voidParity_Stopmode+0x6c>
     940:	08 f1       	brcs	.+66     	; 0x984 <UART_voidParity_Stopmode+0x58>
     942:	85 30       	cpi	r24, 0x05	; 5
     944:	99 f1       	breq	.+102    	; 0x9ac <UART_voidParity_Stopmode+0x80>
     946:	08 95       	ret
	{
		case UART_PArityDisable_1Stop:
			CLR_bit(UCSRC_REG, 5); // UPM1 = 0
     948:	80 b5       	in	r24, 0x20	; 32
     94a:	8f 7d       	andi	r24, 0xDF	; 223
     94c:	80 bd       	out	0x20, r24	; 32
			CLR_bit(UCSRC_REG, 4); // UPM0 = 0
     94e:	80 b5       	in	r24, 0x20	; 32
     950:	8f 7e       	andi	r24, 0xEF	; 239
     952:	80 bd       	out	0x20, r24	; 32
			CLR_bit(UCSRC_REG, 3); // 1 Stop
     954:	80 b5       	in	r24, 0x20	; 32
     956:	87 7f       	andi	r24, 0xF7	; 247
     958:	80 bd       	out	0x20, r24	; 32
			break;
     95a:	08 95       	ret
		case UART_PArityDisable_2Stop:
			CLR_bit(UCSRC_REG, 5); // UPM1 = 0
     95c:	80 b5       	in	r24, 0x20	; 32
     95e:	8f 7d       	andi	r24, 0xDF	; 223
     960:	80 bd       	out	0x20, r24	; 32
			CLR_bit(UCSRC_REG, 4); // UPM0 = 0
     962:	80 b5       	in	r24, 0x20	; 32
     964:	8f 7e       	andi	r24, 0xEF	; 239
     966:	80 bd       	out	0x20, r24	; 32
			SET_bit(UCSRC_REG, 3); // 2 Stop
     968:	80 b5       	in	r24, 0x20	; 32
     96a:	88 60       	ori	r24, 0x08	; 8
     96c:	80 bd       	out	0x20, r24	; 32
			break;
     96e:	08 95       	ret
		case UART_PArityEven_1Stop:
			SET_bit(UCSRC_REG, 5); // UPM1 = 1
     970:	80 b5       	in	r24, 0x20	; 32
     972:	80 62       	ori	r24, 0x20	; 32
     974:	80 bd       	out	0x20, r24	; 32
			CLR_bit(UCSRC_REG, 4); // UPM0 = 0
     976:	80 b5       	in	r24, 0x20	; 32
     978:	8f 7e       	andi	r24, 0xEF	; 239
     97a:	80 bd       	out	0x20, r24	; 32
			CLR_bit(UCSRC_REG, 3); // 1 Stop
     97c:	80 b5       	in	r24, 0x20	; 32
     97e:	87 7f       	andi	r24, 0xF7	; 247
     980:	80 bd       	out	0x20, r24	; 32
			break;
     982:	08 95       	ret
		case UART_PArityEven_2Stop:
			SET_bit(UCSRC_REG, 5); // UPM1 = 1
     984:	80 b5       	in	r24, 0x20	; 32
     986:	80 62       	ori	r24, 0x20	; 32
     988:	80 bd       	out	0x20, r24	; 32
			CLR_bit(UCSRC_REG, 4); // UPM0 = 0
     98a:	80 b5       	in	r24, 0x20	; 32
     98c:	8f 7e       	andi	r24, 0xEF	; 239
     98e:	80 bd       	out	0x20, r24	; 32
			SET_bit(UCSRC_REG, 3); // 2 Stop
     990:	80 b5       	in	r24, 0x20	; 32
     992:	88 60       	ori	r24, 0x08	; 8
     994:	80 bd       	out	0x20, r24	; 32
			break;
     996:	08 95       	ret
		case UART_PArityOdd_1Stop:
			SET_bit(UCSRC_REG, 5); // UPM1 = 1
     998:	80 b5       	in	r24, 0x20	; 32
     99a:	80 62       	ori	r24, 0x20	; 32
     99c:	80 bd       	out	0x20, r24	; 32
			SET_bit(UCSRC_REG, 4); // UPM0 = 1
     99e:	80 b5       	in	r24, 0x20	; 32
     9a0:	80 61       	ori	r24, 0x10	; 16
     9a2:	80 bd       	out	0x20, r24	; 32
			CLR_bit(UCSRC_REG, 3); // 1 Stop
     9a4:	80 b5       	in	r24, 0x20	; 32
     9a6:	87 7f       	andi	r24, 0xF7	; 247
     9a8:	80 bd       	out	0x20, r24	; 32
			break;
     9aa:	08 95       	ret
		case UART_PArityOdd_2Stop:
			SET_bit(UCSRC_REG, 5); // UPM1 = 1
     9ac:	80 b5       	in	r24, 0x20	; 32
     9ae:	80 62       	ori	r24, 0x20	; 32
     9b0:	80 bd       	out	0x20, r24	; 32
			SET_bit(UCSRC_REG, 4); // UPM0 = 1
     9b2:	80 b5       	in	r24, 0x20	; 32
     9b4:	80 61       	ori	r24, 0x10	; 16
     9b6:	80 bd       	out	0x20, r24	; 32
			SET_bit(UCSRC_REG, 3); // 2 Stop
     9b8:	80 b5       	in	r24, 0x20	; 32
     9ba:	88 60       	ori	r24, 0x08	; 8
     9bc:	80 bd       	out	0x20, r24	; 32
     9be:	08 95       	ret

000009c0 <UART_UART_tInit>:

UART_t UART_UART_tInit(enum UART_mode Local_Enable_mode, enum UART_U2X_Options Local_U2X_mode,
enum UART_MPCM_Options Local_MPCM_mode, enum UART_InterruptMode Local_Interrupt_mode,
enum UART_DataFrame Local_Data_Frame, enum UART_Parity_and_Stop_Mode Local_Control_Frame,
enum UART_ClockPolarity Local_Clock_polarity, u32 Local_Baud_Rate)
{
     9c0:	4f 92       	push	r4
     9c2:	5f 92       	push	r5
     9c4:	6f 92       	push	r6
     9c6:	7f 92       	push	r7
     9c8:	8f 92       	push	r8
     9ca:	9f 92       	push	r9
     9cc:	af 92       	push	r10
     9ce:	cf 92       	push	r12
     9d0:	ef 92       	push	r14
     9d2:	ff 92       	push	r15
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	cd b7       	in	r28, 0x3d	; 61
     9de:	de b7       	in	r29, 0x3e	; 62
     9e0:	4c 01       	movw	r8, r24
     9e2:	f6 2e       	mov	r15, r22
     9e4:	84 2f       	mov	r24, r20
     9e6:	12 2f       	mov	r17, r18
     9e8:	2a 2d       	mov	r18, r10
     9ea:	49 89       	ldd	r20, Y+17	; 0x11
     9ec:	5a 89       	ldd	r21, Y+18	; 0x12
     9ee:	6b 89       	ldd	r22, Y+19	; 0x13
     9f0:	7c 89       	ldd	r23, Y+20	; 0x14
	UCSRA_REG = 0x00;
     9f2:	1b b8       	out	0x0b, r1	; 11
	UCSRB_REG = 0x00;
     9f4:	1a b8       	out	0x0a, r1	; 10
	UCSRC_REG = 0x00;
     9f6:	10 bc       	out	0x20, r1	; 32
	float UBRR_Temp = 0.0;
	
	UART_t UART0;
	UART0.Enable_mode = Local_Enable_mode;
     9f8:	f4 01       	movw	r30, r8
     9fa:	f0 82       	st	Z, r15
	UART0.U2X_mode = Local_U2X_mode;
     9fc:	81 83       	std	Z+1, r24	; 0x01
	UART0.MPCM_mode = Local_MPCM_mode;
     9fe:	12 83       	std	Z+2, r17	; 0x02
	UART0.Interrupt_mode = Local_Interrupt_mode;
     a00:	03 83       	std	Z+3, r16	; 0x03
	UART0.Data_Frame = Local_Data_Frame;
     a02:	e4 82       	std	Z+4, r14	; 0x04
	UART0.Control_Frame = Local_Control_Frame;
     a04:	c5 82       	std	Z+5, r12	; 0x05
	UART0.Clock_polarity = Local_Clock_polarity;
     a06:	a6 82       	std	Z+6, r10	; 0x06
	UART0.Baud_Rate = Local_Baud_Rate;
     a08:	47 83       	std	Z+7, r20	; 0x07
     a0a:	50 87       	std	Z+8, r21	; 0x08
     a0c:	61 87       	std	Z+9, r22	; 0x09
     a0e:	72 87       	std	Z+10, r23	; 0x0a
	
	UBRR_Temp = UART_floatU2Xmode(Local_U2X_mode, Local_Baud_Rate, Local_Clock_polarity);
     a10:	a7 de       	rcall	.-690    	; 0x760 <UART_floatU2Xmode>
     a12:	2b 01       	movw	r4, r22
     a14:	3c 01       	movw	r6, r24
	UART_voidEnablemode(Local_Enable_mode);
     a16:	8f 2d       	mov	r24, r15
     a18:	8e de       	rcall	.-740    	; 0x736 <UART_voidEnablemode>
	UART_voidMPCMmode(Local_MPCM_mode);
     a1a:	81 2f       	mov	r24, r17
     a1c:	16 df       	rcall	.-468    	; 0x84a <UART_voidMPCMmode>
	UART_voidInterruptmode(Local_Interrupt_mode);
     a1e:	80 2f       	mov	r24, r16
     a20:	21 df       	rcall	.-446    	; 0x864 <UART_voidInterruptmode>
	UART_voidDataFrame(Local_Data_Frame);
     a22:	8e 2d       	mov	r24, r14
     a24:	53 df       	rcall	.-346    	; 0x8cc <UART_voidDataFrame>
	UART_voidParity_Stopmode(Local_Control_Frame);
     a26:	8c 2d       	mov	r24, r12
     a28:	81 df       	rcall	.-254    	; 0x92c <UART_voidParity_Stopmode>
     a2a:	c3 01       	movw	r24, r6
	
	UBRRH_REG = ((unsigned short)UBRR_Temp) >> 8; // to take most significant bits
     a2c:	b2 01       	movw	r22, r4
     a2e:	63 d1       	rcall	.+710    	; 0xcf6 <__fixunssfsi>
     a30:	70 bd       	out	0x20, r23	; 32
     a32:	69 b9       	out	0x09, r22	; 9
     a34:	c4 01       	movw	r24, r8
	UBRRL_REG = (((u16)UBRR_Temp) & 0xFF); // to take least significant bits
     a36:	df 91       	pop	r29
	return UART0;
}
     a38:	cf 91       	pop	r28
     a3a:	1f 91       	pop	r17
     a3c:	0f 91       	pop	r16
     a3e:	ff 90       	pop	r15
     a40:	ef 90       	pop	r14
     a42:	cf 90       	pop	r12
     a44:	af 90       	pop	r10
     a46:	9f 90       	pop	r9
     a48:	8f 90       	pop	r8
     a4a:	7f 90       	pop	r7
     a4c:	6f 90       	pop	r6
     a4e:	5f 90       	pop	r5
     a50:	4f 90       	pop	r4
     a52:	08 95       	ret

00000a54 <UART_voidTransmitByte>:
     a54:	cf 92       	push	r12
     a56:	df 92       	push	r13


void UART_voidTransmitByte(u8 Byte, UART_t UART0)
{
     a58:	ef 92       	push	r14
     a5a:	ff 92       	push	r15
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	cd b7       	in	r28, 0x3d	; 61
     a66:	de b7       	in	r29, 0x3e	; 62
     a68:	2b 97       	sbiw	r28, 0x0b	; 11
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	f8 94       	cli
     a6e:	de bf       	out	0x3e, r29	; 62
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	cd bf       	out	0x3d, r28	; 61
     a74:	c9 82       	std	Y+1, r12	; 0x01
     a76:	da 82       	std	Y+2, r13	; 0x02
     a78:	eb 82       	std	Y+3, r14	; 0x03
     a7a:	fc 82       	std	Y+4, r15	; 0x04
     a7c:	0d 83       	std	Y+5, r16	; 0x05
     a7e:	1e 83       	std	Y+6, r17	; 0x06
     a80:	2f 83       	std	Y+7, r18	; 0x07
     a82:	38 87       	std	Y+8, r19	; 0x08
     a84:	49 87       	std	Y+9, r20	; 0x09
     a86:	5a 87       	std	Y+10, r21	; 0x0a
     a88:	6b 87       	std	Y+11, r22	; 0x0b
	// This while holds the operation until TX reg UDR is empty
	while(GET_bit(UCSRA_REG, 5) == 0) {} // 5 means UDRE
     a8a:	5d 9b       	sbis	0x0b, 5	; 11
     a8c:	fe cf       	rjmp	.-4      	; 0xa8a <UART_voidTransmitByte+0x36>
	
	if(UART0.Data_Frame == UART_9bitData)
     a8e:	9d 81       	ldd	r25, Y+5	; 0x05
     a90:	94 30       	cpi	r25, 0x04	; 4
     a92:	11 f4       	brne	.+4      	; 0xa98 <UART_voidTransmitByte+0x44>
	{
		UCSRB_REG |= (GET_bit(Byte, 8)) >> 8; //shifted by 8 to be in 9 digit
     a94:	9a b1       	in	r25, 0x0a	; 10
     a96:	9a b9       	out	0x0a, r25	; 10
	}
	UDR_REG = Byte;
     a98:	8c b9       	out	0x0c, r24	; 12
}
     a9a:	2b 96       	adiw	r28, 0x0b	; 11
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	f8 94       	cli
     aa0:	de bf       	out	0x3e, r29	; 62
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	cd bf       	out	0x3d, r28	; 61
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	1f 91       	pop	r17
     aac:	0f 91       	pop	r16
     aae:	ff 90       	pop	r15
     ab0:	ef 90       	pop	r14
     ab2:	df 90       	pop	r13
     ab4:	cf 90       	pop	r12
     ab6:	08 95       	ret

00000ab8 <UART_voidTransmitString>:

void UART_voidTransmitString(u8* Str, UART_t UART0)
{
     ab8:	8f 92       	push	r8
     aba:	9f 92       	push	r9
     abc:	bf 92       	push	r11
     abe:	cf 92       	push	r12
     ac0:	df 92       	push	r13
     ac2:	ef 92       	push	r14
     ac4:	ff 92       	push	r15
     ac6:	0f 93       	push	r16
     ac8:	1f 93       	push	r17
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	cd b7       	in	r28, 0x3d	; 61
     ad0:	de b7       	in	r29, 0x3e	; 62
     ad2:	2b 97       	sbiw	r28, 0x0b	; 11
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	f8 94       	cli
     ad8:	de bf       	out	0x3e, r29	; 62
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	cd bf       	out	0x3d, r28	; 61
     ade:	4c 01       	movw	r8, r24
     ae0:	c9 82       	std	Y+1, r12	; 0x01
     ae2:	da 82       	std	Y+2, r13	; 0x02
     ae4:	eb 82       	std	Y+3, r14	; 0x03
     ae6:	fc 82       	std	Y+4, r15	; 0x04
     ae8:	0d 83       	std	Y+5, r16	; 0x05
     aea:	1e 83       	std	Y+6, r17	; 0x06
     aec:	2f 83       	std	Y+7, r18	; 0x07
     aee:	38 87       	std	Y+8, r19	; 0x08
     af0:	49 87       	std	Y+9, r20	; 0x09
     af2:	5a 87       	std	Y+10, r21	; 0x0a
     af4:	6b 87       	std	Y+11, r22	; 0x0b
	u8 i = 0;
     af6:	b1 2c       	mov	r11, r1
	while(Str[i] != '\0')
     af8:	0d c0       	rjmp	.+26     	; 0xb14 <UART_voidTransmitString+0x5c>
	{
		UART_voidTransmitByte(Str[i], UART0);
     afa:	c9 80       	ldd	r12, Y+1	; 0x01
     afc:	da 80       	ldd	r13, Y+2	; 0x02
     afe:	eb 80       	ldd	r14, Y+3	; 0x03
     b00:	fc 80       	ldd	r15, Y+4	; 0x04
     b02:	0d 81       	ldd	r16, Y+5	; 0x05
     b04:	1e 81       	ldd	r17, Y+6	; 0x06
     b06:	2f 81       	ldd	r18, Y+7	; 0x07
     b08:	38 85       	ldd	r19, Y+8	; 0x08
     b0a:	49 85       	ldd	r20, Y+9	; 0x09
     b0c:	5a 85       	ldd	r21, Y+10	; 0x0a
     b0e:	6b 85       	ldd	r22, Y+11	; 0x0b
     b10:	a1 df       	rcall	.-190    	; 0xa54 <UART_voidTransmitByte>
		i++;
     b12:	b3 94       	inc	r11
}

void UART_voidTransmitString(u8* Str, UART_t UART0)
{
	u8 i = 0;
	while(Str[i] != '\0')
     b14:	f4 01       	movw	r30, r8
     b16:	eb 0d       	add	r30, r11
     b18:	f1 1d       	adc	r31, r1
     b1a:	80 81       	ld	r24, Z
     b1c:	81 11       	cpse	r24, r1
     b1e:	ed cf       	rjmp	.-38     	; 0xafa <UART_voidTransmitString+0x42>
	{
		UART_voidTransmitByte(Str[i], UART0);
		i++;
	}
	UART_voidTransmitByte('\0', UART0);
     b20:	c9 80       	ldd	r12, Y+1	; 0x01
     b22:	da 80       	ldd	r13, Y+2	; 0x02
     b24:	eb 80       	ldd	r14, Y+3	; 0x03
     b26:	fc 80       	ldd	r15, Y+4	; 0x04
     b28:	0d 81       	ldd	r16, Y+5	; 0x05
     b2a:	1e 81       	ldd	r17, Y+6	; 0x06
     b2c:	2f 81       	ldd	r18, Y+7	; 0x07
     b2e:	38 85       	ldd	r19, Y+8	; 0x08
     b30:	49 85       	ldd	r20, Y+9	; 0x09
     b32:	5a 85       	ldd	r21, Y+10	; 0x0a
     b34:	6b 85       	ldd	r22, Y+11	; 0x0b
     b36:	8e df       	rcall	.-228    	; 0xa54 <UART_voidTransmitByte>
}
     b38:	2b 96       	adiw	r28, 0x0b	; 11
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	f8 94       	cli
     b3e:	de bf       	out	0x3e, r29	; 62
     b40:	0f be       	out	0x3f, r0	; 63
     b42:	cd bf       	out	0x3d, r28	; 61
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	ff 90       	pop	r15
     b4e:	ef 90       	pop	r14
     b50:	df 90       	pop	r13
     b52:	cf 90       	pop	r12
     b54:	bf 90       	pop	r11
     b56:	9f 90       	pop	r9
     b58:	8f 90       	pop	r8
     b5a:	08 95       	ret

00000b5c <__subsf3>:
     b5c:	50 58       	subi	r21, 0x80	; 128

00000b5e <__addsf3>:
     b5e:	bb 27       	eor	r27, r27
     b60:	aa 27       	eor	r26, r26
     b62:	0e d0       	rcall	.+28     	; 0xb80 <__addsf3x>
     b64:	48 c1       	rjmp	.+656    	; 0xdf6 <__fp_round>
     b66:	39 d1       	rcall	.+626    	; 0xdda <__fp_pscA>
     b68:	30 f0       	brcs	.+12     	; 0xb76 <__addsf3+0x18>
     b6a:	3e d1       	rcall	.+636    	; 0xde8 <__fp_pscB>
     b6c:	20 f0       	brcs	.+8      	; 0xb76 <__addsf3+0x18>
     b6e:	31 f4       	brne	.+12     	; 0xb7c <__addsf3+0x1e>
     b70:	9f 3f       	cpi	r25, 0xFF	; 255
     b72:	11 f4       	brne	.+4      	; 0xb78 <__addsf3+0x1a>
     b74:	1e f4       	brtc	.+6      	; 0xb7c <__addsf3+0x1e>
     b76:	2e c1       	rjmp	.+604    	; 0xdd4 <__fp_nan>
     b78:	0e f4       	brtc	.+2      	; 0xb7c <__addsf3+0x1e>
     b7a:	e0 95       	com	r30
     b7c:	e7 fb       	bst	r30, 7
     b7e:	24 c1       	rjmp	.+584    	; 0xdc8 <__fp_inf>

00000b80 <__addsf3x>:
     b80:	e9 2f       	mov	r30, r25
     b82:	4a d1       	rcall	.+660    	; 0xe18 <__fp_split3>
     b84:	80 f3       	brcs	.-32     	; 0xb66 <__addsf3+0x8>
     b86:	ba 17       	cp	r27, r26
     b88:	62 07       	cpc	r22, r18
     b8a:	73 07       	cpc	r23, r19
     b8c:	84 07       	cpc	r24, r20
     b8e:	95 07       	cpc	r25, r21
     b90:	18 f0       	brcs	.+6      	; 0xb98 <__addsf3x+0x18>
     b92:	71 f4       	brne	.+28     	; 0xbb0 <__addsf3x+0x30>
     b94:	9e f5       	brtc	.+102    	; 0xbfc <__addsf3x+0x7c>
     b96:	62 c1       	rjmp	.+708    	; 0xe5c <__fp_zero>
     b98:	0e f4       	brtc	.+2      	; 0xb9c <__addsf3x+0x1c>
     b9a:	e0 95       	com	r30
     b9c:	0b 2e       	mov	r0, r27
     b9e:	ba 2f       	mov	r27, r26
     ba0:	a0 2d       	mov	r26, r0
     ba2:	0b 01       	movw	r0, r22
     ba4:	b9 01       	movw	r22, r18
     ba6:	90 01       	movw	r18, r0
     ba8:	0c 01       	movw	r0, r24
     baa:	ca 01       	movw	r24, r20
     bac:	a0 01       	movw	r20, r0
     bae:	11 24       	eor	r1, r1
     bb0:	ff 27       	eor	r31, r31
     bb2:	59 1b       	sub	r21, r25
     bb4:	99 f0       	breq	.+38     	; 0xbdc <__addsf3x+0x5c>
     bb6:	59 3f       	cpi	r21, 0xF9	; 249
     bb8:	50 f4       	brcc	.+20     	; 0xbce <__addsf3x+0x4e>
     bba:	50 3e       	cpi	r21, 0xE0	; 224
     bbc:	68 f1       	brcs	.+90     	; 0xc18 <__addsf3x+0x98>
     bbe:	1a 16       	cp	r1, r26
     bc0:	f0 40       	sbci	r31, 0x00	; 0
     bc2:	a2 2f       	mov	r26, r18
     bc4:	23 2f       	mov	r18, r19
     bc6:	34 2f       	mov	r19, r20
     bc8:	44 27       	eor	r20, r20
     bca:	58 5f       	subi	r21, 0xF8	; 248
     bcc:	f3 cf       	rjmp	.-26     	; 0xbb4 <__addsf3x+0x34>
     bce:	46 95       	lsr	r20
     bd0:	37 95       	ror	r19
     bd2:	27 95       	ror	r18
     bd4:	a7 95       	ror	r26
     bd6:	f0 40       	sbci	r31, 0x00	; 0
     bd8:	53 95       	inc	r21
     bda:	c9 f7       	brne	.-14     	; 0xbce <__addsf3x+0x4e>
     bdc:	7e f4       	brtc	.+30     	; 0xbfc <__addsf3x+0x7c>
     bde:	1f 16       	cp	r1, r31
     be0:	ba 0b       	sbc	r27, r26
     be2:	62 0b       	sbc	r22, r18
     be4:	73 0b       	sbc	r23, r19
     be6:	84 0b       	sbc	r24, r20
     be8:	ba f0       	brmi	.+46     	; 0xc18 <__addsf3x+0x98>
     bea:	91 50       	subi	r25, 0x01	; 1
     bec:	a1 f0       	breq	.+40     	; 0xc16 <__addsf3x+0x96>
     bee:	ff 0f       	add	r31, r31
     bf0:	bb 1f       	adc	r27, r27
     bf2:	66 1f       	adc	r22, r22
     bf4:	77 1f       	adc	r23, r23
     bf6:	88 1f       	adc	r24, r24
     bf8:	c2 f7       	brpl	.-16     	; 0xbea <__addsf3x+0x6a>
     bfa:	0e c0       	rjmp	.+28     	; 0xc18 <__addsf3x+0x98>
     bfc:	ba 0f       	add	r27, r26
     bfe:	62 1f       	adc	r22, r18
     c00:	73 1f       	adc	r23, r19
     c02:	84 1f       	adc	r24, r20
     c04:	48 f4       	brcc	.+18     	; 0xc18 <__addsf3x+0x98>
     c06:	87 95       	ror	r24
     c08:	77 95       	ror	r23
     c0a:	67 95       	ror	r22
     c0c:	b7 95       	ror	r27
     c0e:	f7 95       	ror	r31
     c10:	9e 3f       	cpi	r25, 0xFE	; 254
     c12:	08 f0       	brcs	.+2      	; 0xc16 <__addsf3x+0x96>
     c14:	b3 cf       	rjmp	.-154    	; 0xb7c <__addsf3+0x1e>
     c16:	93 95       	inc	r25
     c18:	88 0f       	add	r24, r24
     c1a:	08 f0       	brcs	.+2      	; 0xc1e <__addsf3x+0x9e>
     c1c:	99 27       	eor	r25, r25
     c1e:	ee 0f       	add	r30, r30
     c20:	97 95       	ror	r25
     c22:	87 95       	ror	r24
     c24:	08 95       	ret

00000c26 <__divsf3>:
     c26:	0c d0       	rcall	.+24     	; 0xc40 <__divsf3x>
     c28:	e6 c0       	rjmp	.+460    	; 0xdf6 <__fp_round>
     c2a:	de d0       	rcall	.+444    	; 0xde8 <__fp_pscB>
     c2c:	40 f0       	brcs	.+16     	; 0xc3e <__divsf3+0x18>
     c2e:	d5 d0       	rcall	.+426    	; 0xdda <__fp_pscA>
     c30:	30 f0       	brcs	.+12     	; 0xc3e <__divsf3+0x18>
     c32:	21 f4       	brne	.+8      	; 0xc3c <__divsf3+0x16>
     c34:	5f 3f       	cpi	r21, 0xFF	; 255
     c36:	19 f0       	breq	.+6      	; 0xc3e <__divsf3+0x18>
     c38:	c7 c0       	rjmp	.+398    	; 0xdc8 <__fp_inf>
     c3a:	51 11       	cpse	r21, r1
     c3c:	10 c1       	rjmp	.+544    	; 0xe5e <__fp_szero>
     c3e:	ca c0       	rjmp	.+404    	; 0xdd4 <__fp_nan>

00000c40 <__divsf3x>:
     c40:	eb d0       	rcall	.+470    	; 0xe18 <__fp_split3>
     c42:	98 f3       	brcs	.-26     	; 0xc2a <__divsf3+0x4>

00000c44 <__divsf3_pse>:
     c44:	99 23       	and	r25, r25
     c46:	c9 f3       	breq	.-14     	; 0xc3a <__divsf3+0x14>
     c48:	55 23       	and	r21, r21
     c4a:	b1 f3       	breq	.-20     	; 0xc38 <__divsf3+0x12>
     c4c:	95 1b       	sub	r25, r21
     c4e:	55 0b       	sbc	r21, r21
     c50:	bb 27       	eor	r27, r27
     c52:	aa 27       	eor	r26, r26
     c54:	62 17       	cp	r22, r18
     c56:	73 07       	cpc	r23, r19
     c58:	84 07       	cpc	r24, r20
     c5a:	38 f0       	brcs	.+14     	; 0xc6a <__divsf3_pse+0x26>
     c5c:	9f 5f       	subi	r25, 0xFF	; 255
     c5e:	5f 4f       	sbci	r21, 0xFF	; 255
     c60:	22 0f       	add	r18, r18
     c62:	33 1f       	adc	r19, r19
     c64:	44 1f       	adc	r20, r20
     c66:	aa 1f       	adc	r26, r26
     c68:	a9 f3       	breq	.-22     	; 0xc54 <__divsf3_pse+0x10>
     c6a:	33 d0       	rcall	.+102    	; 0xcd2 <__divsf3_pse+0x8e>
     c6c:	0e 2e       	mov	r0, r30
     c6e:	3a f0       	brmi	.+14     	; 0xc7e <__divsf3_pse+0x3a>
     c70:	e0 e8       	ldi	r30, 0x80	; 128
     c72:	30 d0       	rcall	.+96     	; 0xcd4 <__divsf3_pse+0x90>
     c74:	91 50       	subi	r25, 0x01	; 1
     c76:	50 40       	sbci	r21, 0x00	; 0
     c78:	e6 95       	lsr	r30
     c7a:	00 1c       	adc	r0, r0
     c7c:	ca f7       	brpl	.-14     	; 0xc70 <__divsf3_pse+0x2c>
     c7e:	29 d0       	rcall	.+82     	; 0xcd2 <__divsf3_pse+0x8e>
     c80:	fe 2f       	mov	r31, r30
     c82:	27 d0       	rcall	.+78     	; 0xcd2 <__divsf3_pse+0x8e>
     c84:	66 0f       	add	r22, r22
     c86:	77 1f       	adc	r23, r23
     c88:	88 1f       	adc	r24, r24
     c8a:	bb 1f       	adc	r27, r27
     c8c:	26 17       	cp	r18, r22
     c8e:	37 07       	cpc	r19, r23
     c90:	48 07       	cpc	r20, r24
     c92:	ab 07       	cpc	r26, r27
     c94:	b0 e8       	ldi	r27, 0x80	; 128
     c96:	09 f0       	breq	.+2      	; 0xc9a <__divsf3_pse+0x56>
     c98:	bb 0b       	sbc	r27, r27
     c9a:	80 2d       	mov	r24, r0
     c9c:	bf 01       	movw	r22, r30
     c9e:	ff 27       	eor	r31, r31
     ca0:	93 58       	subi	r25, 0x83	; 131
     ca2:	5f 4f       	sbci	r21, 0xFF	; 255
     ca4:	2a f0       	brmi	.+10     	; 0xcb0 <__divsf3_pse+0x6c>
     ca6:	9e 3f       	cpi	r25, 0xFE	; 254
     ca8:	51 05       	cpc	r21, r1
     caa:	68 f0       	brcs	.+26     	; 0xcc6 <__divsf3_pse+0x82>
     cac:	8d c0       	rjmp	.+282    	; 0xdc8 <__fp_inf>
     cae:	d7 c0       	rjmp	.+430    	; 0xe5e <__fp_szero>
     cb0:	5f 3f       	cpi	r21, 0xFF	; 255
     cb2:	ec f3       	brlt	.-6      	; 0xcae <__divsf3_pse+0x6a>
     cb4:	98 3e       	cpi	r25, 0xE8	; 232
     cb6:	dc f3       	brlt	.-10     	; 0xcae <__divsf3_pse+0x6a>
     cb8:	86 95       	lsr	r24
     cba:	77 95       	ror	r23
     cbc:	67 95       	ror	r22
     cbe:	b7 95       	ror	r27
     cc0:	f7 95       	ror	r31
     cc2:	9f 5f       	subi	r25, 0xFF	; 255
     cc4:	c9 f7       	brne	.-14     	; 0xcb8 <__divsf3_pse+0x74>
     cc6:	88 0f       	add	r24, r24
     cc8:	91 1d       	adc	r25, r1
     cca:	96 95       	lsr	r25
     ccc:	87 95       	ror	r24
     cce:	97 f9       	bld	r25, 7
     cd0:	08 95       	ret
     cd2:	e1 e0       	ldi	r30, 0x01	; 1
     cd4:	66 0f       	add	r22, r22
     cd6:	77 1f       	adc	r23, r23
     cd8:	88 1f       	adc	r24, r24
     cda:	bb 1f       	adc	r27, r27
     cdc:	62 17       	cp	r22, r18
     cde:	73 07       	cpc	r23, r19
     ce0:	84 07       	cpc	r24, r20
     ce2:	ba 07       	cpc	r27, r26
     ce4:	20 f0       	brcs	.+8      	; 0xcee <__divsf3_pse+0xaa>
     ce6:	62 1b       	sub	r22, r18
     ce8:	73 0b       	sbc	r23, r19
     cea:	84 0b       	sbc	r24, r20
     cec:	ba 0b       	sbc	r27, r26
     cee:	ee 1f       	adc	r30, r30
     cf0:	88 f7       	brcc	.-30     	; 0xcd4 <__divsf3_pse+0x90>
     cf2:	e0 95       	com	r30
     cf4:	08 95       	ret

00000cf6 <__fixunssfsi>:
     cf6:	98 d0       	rcall	.+304    	; 0xe28 <__fp_splitA>
     cf8:	88 f0       	brcs	.+34     	; 0xd1c <__fixunssfsi+0x26>
     cfa:	9f 57       	subi	r25, 0x7F	; 127
     cfc:	90 f0       	brcs	.+36     	; 0xd22 <__fixunssfsi+0x2c>
     cfe:	b9 2f       	mov	r27, r25
     d00:	99 27       	eor	r25, r25
     d02:	b7 51       	subi	r27, 0x17	; 23
     d04:	a0 f0       	brcs	.+40     	; 0xd2e <__fixunssfsi+0x38>
     d06:	d1 f0       	breq	.+52     	; 0xd3c <__fixunssfsi+0x46>
     d08:	66 0f       	add	r22, r22
     d0a:	77 1f       	adc	r23, r23
     d0c:	88 1f       	adc	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	1a f0       	brmi	.+6      	; 0xd18 <__fixunssfsi+0x22>
     d12:	ba 95       	dec	r27
     d14:	c9 f7       	brne	.-14     	; 0xd08 <__fixunssfsi+0x12>
     d16:	12 c0       	rjmp	.+36     	; 0xd3c <__fixunssfsi+0x46>
     d18:	b1 30       	cpi	r27, 0x01	; 1
     d1a:	81 f0       	breq	.+32     	; 0xd3c <__fixunssfsi+0x46>
     d1c:	9f d0       	rcall	.+318    	; 0xe5c <__fp_zero>
     d1e:	b1 e0       	ldi	r27, 0x01	; 1
     d20:	08 95       	ret
     d22:	9c c0       	rjmp	.+312    	; 0xe5c <__fp_zero>
     d24:	67 2f       	mov	r22, r23
     d26:	78 2f       	mov	r23, r24
     d28:	88 27       	eor	r24, r24
     d2a:	b8 5f       	subi	r27, 0xF8	; 248
     d2c:	39 f0       	breq	.+14     	; 0xd3c <__fixunssfsi+0x46>
     d2e:	b9 3f       	cpi	r27, 0xF9	; 249
     d30:	cc f3       	brlt	.-14     	; 0xd24 <__fixunssfsi+0x2e>
     d32:	86 95       	lsr	r24
     d34:	77 95       	ror	r23
     d36:	67 95       	ror	r22
     d38:	b3 95       	inc	r27
     d3a:	d9 f7       	brne	.-10     	; 0xd32 <__fixunssfsi+0x3c>
     d3c:	3e f4       	brtc	.+14     	; 0xd4c <__fixunssfsi+0x56>
     d3e:	90 95       	com	r25
     d40:	80 95       	com	r24
     d42:	70 95       	com	r23
     d44:	61 95       	neg	r22
     d46:	7f 4f       	sbci	r23, 0xFF	; 255
     d48:	8f 4f       	sbci	r24, 0xFF	; 255
     d4a:	9f 4f       	sbci	r25, 0xFF	; 255
     d4c:	08 95       	ret

00000d4e <__floatunsisf>:
     d4e:	e8 94       	clt
     d50:	09 c0       	rjmp	.+18     	; 0xd64 <__floatsisf+0x12>

00000d52 <__floatsisf>:
     d52:	97 fb       	bst	r25, 7
     d54:	3e f4       	brtc	.+14     	; 0xd64 <__floatsisf+0x12>
     d56:	90 95       	com	r25
     d58:	80 95       	com	r24
     d5a:	70 95       	com	r23
     d5c:	61 95       	neg	r22
     d5e:	7f 4f       	sbci	r23, 0xFF	; 255
     d60:	8f 4f       	sbci	r24, 0xFF	; 255
     d62:	9f 4f       	sbci	r25, 0xFF	; 255
     d64:	99 23       	and	r25, r25
     d66:	a9 f0       	breq	.+42     	; 0xd92 <__floatsisf+0x40>
     d68:	f9 2f       	mov	r31, r25
     d6a:	96 e9       	ldi	r25, 0x96	; 150
     d6c:	bb 27       	eor	r27, r27
     d6e:	93 95       	inc	r25
     d70:	f6 95       	lsr	r31
     d72:	87 95       	ror	r24
     d74:	77 95       	ror	r23
     d76:	67 95       	ror	r22
     d78:	b7 95       	ror	r27
     d7a:	f1 11       	cpse	r31, r1
     d7c:	f8 cf       	rjmp	.-16     	; 0xd6e <__floatsisf+0x1c>
     d7e:	fa f4       	brpl	.+62     	; 0xdbe <__floatsisf+0x6c>
     d80:	bb 0f       	add	r27, r27
     d82:	11 f4       	brne	.+4      	; 0xd88 <__floatsisf+0x36>
     d84:	60 ff       	sbrs	r22, 0
     d86:	1b c0       	rjmp	.+54     	; 0xdbe <__floatsisf+0x6c>
     d88:	6f 5f       	subi	r22, 0xFF	; 255
     d8a:	7f 4f       	sbci	r23, 0xFF	; 255
     d8c:	8f 4f       	sbci	r24, 0xFF	; 255
     d8e:	9f 4f       	sbci	r25, 0xFF	; 255
     d90:	16 c0       	rjmp	.+44     	; 0xdbe <__floatsisf+0x6c>
     d92:	88 23       	and	r24, r24
     d94:	11 f0       	breq	.+4      	; 0xd9a <__floatsisf+0x48>
     d96:	96 e9       	ldi	r25, 0x96	; 150
     d98:	11 c0       	rjmp	.+34     	; 0xdbc <__floatsisf+0x6a>
     d9a:	77 23       	and	r23, r23
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__floatsisf+0x54>
     d9e:	9e e8       	ldi	r25, 0x8E	; 142
     da0:	87 2f       	mov	r24, r23
     da2:	76 2f       	mov	r23, r22
     da4:	05 c0       	rjmp	.+10     	; 0xdb0 <__floatsisf+0x5e>
     da6:	66 23       	and	r22, r22
     da8:	71 f0       	breq	.+28     	; 0xdc6 <__floatsisf+0x74>
     daa:	96 e8       	ldi	r25, 0x86	; 134
     dac:	86 2f       	mov	r24, r22
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	2a f0       	brmi	.+10     	; 0xdbe <__floatsisf+0x6c>
     db4:	9a 95       	dec	r25
     db6:	66 0f       	add	r22, r22
     db8:	77 1f       	adc	r23, r23
     dba:	88 1f       	adc	r24, r24
     dbc:	da f7       	brpl	.-10     	; 0xdb4 <__floatsisf+0x62>
     dbe:	88 0f       	add	r24, r24
     dc0:	96 95       	lsr	r25
     dc2:	87 95       	ror	r24
     dc4:	97 f9       	bld	r25, 7
     dc6:	08 95       	ret

00000dc8 <__fp_inf>:
     dc8:	97 f9       	bld	r25, 7
     dca:	9f 67       	ori	r25, 0x7F	; 127
     dcc:	80 e8       	ldi	r24, 0x80	; 128
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	08 95       	ret

00000dd4 <__fp_nan>:
     dd4:	9f ef       	ldi	r25, 0xFF	; 255
     dd6:	80 ec       	ldi	r24, 0xC0	; 192
     dd8:	08 95       	ret

00000dda <__fp_pscA>:
     dda:	00 24       	eor	r0, r0
     ddc:	0a 94       	dec	r0
     dde:	16 16       	cp	r1, r22
     de0:	17 06       	cpc	r1, r23
     de2:	18 06       	cpc	r1, r24
     de4:	09 06       	cpc	r0, r25
     de6:	08 95       	ret

00000de8 <__fp_pscB>:
     de8:	00 24       	eor	r0, r0
     dea:	0a 94       	dec	r0
     dec:	12 16       	cp	r1, r18
     dee:	13 06       	cpc	r1, r19
     df0:	14 06       	cpc	r1, r20
     df2:	05 06       	cpc	r0, r21
     df4:	08 95       	ret

00000df6 <__fp_round>:
     df6:	09 2e       	mov	r0, r25
     df8:	03 94       	inc	r0
     dfa:	00 0c       	add	r0, r0
     dfc:	11 f4       	brne	.+4      	; 0xe02 <__fp_round+0xc>
     dfe:	88 23       	and	r24, r24
     e00:	52 f0       	brmi	.+20     	; 0xe16 <__fp_round+0x20>
     e02:	bb 0f       	add	r27, r27
     e04:	40 f4       	brcc	.+16     	; 0xe16 <__fp_round+0x20>
     e06:	bf 2b       	or	r27, r31
     e08:	11 f4       	brne	.+4      	; 0xe0e <__fp_round+0x18>
     e0a:	60 ff       	sbrs	r22, 0
     e0c:	04 c0       	rjmp	.+8      	; 0xe16 <__fp_round+0x20>
     e0e:	6f 5f       	subi	r22, 0xFF	; 255
     e10:	7f 4f       	sbci	r23, 0xFF	; 255
     e12:	8f 4f       	sbci	r24, 0xFF	; 255
     e14:	9f 4f       	sbci	r25, 0xFF	; 255
     e16:	08 95       	ret

00000e18 <__fp_split3>:
     e18:	57 fd       	sbrc	r21, 7
     e1a:	90 58       	subi	r25, 0x80	; 128
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	59 f0       	breq	.+22     	; 0xe38 <__fp_splitA+0x10>
     e22:	5f 3f       	cpi	r21, 0xFF	; 255
     e24:	71 f0       	breq	.+28     	; 0xe42 <__fp_splitA+0x1a>
     e26:	47 95       	ror	r20

00000e28 <__fp_splitA>:
     e28:	88 0f       	add	r24, r24
     e2a:	97 fb       	bst	r25, 7
     e2c:	99 1f       	adc	r25, r25
     e2e:	61 f0       	breq	.+24     	; 0xe48 <__fp_splitA+0x20>
     e30:	9f 3f       	cpi	r25, 0xFF	; 255
     e32:	79 f0       	breq	.+30     	; 0xe52 <__fp_splitA+0x2a>
     e34:	87 95       	ror	r24
     e36:	08 95       	ret
     e38:	12 16       	cp	r1, r18
     e3a:	13 06       	cpc	r1, r19
     e3c:	14 06       	cpc	r1, r20
     e3e:	55 1f       	adc	r21, r21
     e40:	f2 cf       	rjmp	.-28     	; 0xe26 <__fp_split3+0xe>
     e42:	46 95       	lsr	r20
     e44:	f1 df       	rcall	.-30     	; 0xe28 <__fp_splitA>
     e46:	08 c0       	rjmp	.+16     	; 0xe58 <__fp_splitA+0x30>
     e48:	16 16       	cp	r1, r22
     e4a:	17 06       	cpc	r1, r23
     e4c:	18 06       	cpc	r1, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	f1 cf       	rjmp	.-30     	; 0xe34 <__fp_splitA+0xc>
     e52:	86 95       	lsr	r24
     e54:	71 05       	cpc	r23, r1
     e56:	61 05       	cpc	r22, r1
     e58:	08 94       	sec
     e5a:	08 95       	ret

00000e5c <__fp_zero>:
     e5c:	e8 94       	clt

00000e5e <__fp_szero>:
     e5e:	bb 27       	eor	r27, r27
     e60:	66 27       	eor	r22, r22
     e62:	77 27       	eor	r23, r23
     e64:	cb 01       	movw	r24, r22
     e66:	97 f9       	bld	r25, 7
     e68:	08 95       	ret

00000e6a <__mulsf3>:
     e6a:	0b d0       	rcall	.+22     	; 0xe82 <__mulsf3x>
     e6c:	c4 cf       	rjmp	.-120    	; 0xdf6 <__fp_round>
     e6e:	b5 df       	rcall	.-150    	; 0xdda <__fp_pscA>
     e70:	28 f0       	brcs	.+10     	; 0xe7c <__mulsf3+0x12>
     e72:	ba df       	rcall	.-140    	; 0xde8 <__fp_pscB>
     e74:	18 f0       	brcs	.+6      	; 0xe7c <__mulsf3+0x12>
     e76:	95 23       	and	r25, r21
     e78:	09 f0       	breq	.+2      	; 0xe7c <__mulsf3+0x12>
     e7a:	a6 cf       	rjmp	.-180    	; 0xdc8 <__fp_inf>
     e7c:	ab cf       	rjmp	.-170    	; 0xdd4 <__fp_nan>
     e7e:	11 24       	eor	r1, r1
     e80:	ee cf       	rjmp	.-36     	; 0xe5e <__fp_szero>

00000e82 <__mulsf3x>:
     e82:	ca df       	rcall	.-108    	; 0xe18 <__fp_split3>
     e84:	a0 f3       	brcs	.-24     	; 0xe6e <__mulsf3+0x4>

00000e86 <__mulsf3_pse>:
     e86:	95 9f       	mul	r25, r21
     e88:	d1 f3       	breq	.-12     	; 0xe7e <__mulsf3+0x14>
     e8a:	95 0f       	add	r25, r21
     e8c:	50 e0       	ldi	r21, 0x00	; 0
     e8e:	55 1f       	adc	r21, r21
     e90:	62 9f       	mul	r22, r18
     e92:	f0 01       	movw	r30, r0
     e94:	72 9f       	mul	r23, r18
     e96:	bb 27       	eor	r27, r27
     e98:	f0 0d       	add	r31, r0
     e9a:	b1 1d       	adc	r27, r1
     e9c:	63 9f       	mul	r22, r19
     e9e:	aa 27       	eor	r26, r26
     ea0:	f0 0d       	add	r31, r0
     ea2:	b1 1d       	adc	r27, r1
     ea4:	aa 1f       	adc	r26, r26
     ea6:	64 9f       	mul	r22, r20
     ea8:	66 27       	eor	r22, r22
     eaa:	b0 0d       	add	r27, r0
     eac:	a1 1d       	adc	r26, r1
     eae:	66 1f       	adc	r22, r22
     eb0:	82 9f       	mul	r24, r18
     eb2:	22 27       	eor	r18, r18
     eb4:	b0 0d       	add	r27, r0
     eb6:	a1 1d       	adc	r26, r1
     eb8:	62 1f       	adc	r22, r18
     eba:	73 9f       	mul	r23, r19
     ebc:	b0 0d       	add	r27, r0
     ebe:	a1 1d       	adc	r26, r1
     ec0:	62 1f       	adc	r22, r18
     ec2:	83 9f       	mul	r24, r19
     ec4:	a0 0d       	add	r26, r0
     ec6:	61 1d       	adc	r22, r1
     ec8:	22 1f       	adc	r18, r18
     eca:	74 9f       	mul	r23, r20
     ecc:	33 27       	eor	r19, r19
     ece:	a0 0d       	add	r26, r0
     ed0:	61 1d       	adc	r22, r1
     ed2:	23 1f       	adc	r18, r19
     ed4:	84 9f       	mul	r24, r20
     ed6:	60 0d       	add	r22, r0
     ed8:	21 1d       	adc	r18, r1
     eda:	82 2f       	mov	r24, r18
     edc:	76 2f       	mov	r23, r22
     ede:	6a 2f       	mov	r22, r26
     ee0:	11 24       	eor	r1, r1
     ee2:	9f 57       	subi	r25, 0x7F	; 127
     ee4:	50 40       	sbci	r21, 0x00	; 0
     ee6:	8a f0       	brmi	.+34     	; 0xf0a <__mulsf3_pse+0x84>
     ee8:	e1 f0       	breq	.+56     	; 0xf22 <__mulsf3_pse+0x9c>
     eea:	88 23       	and	r24, r24
     eec:	4a f0       	brmi	.+18     	; 0xf00 <__mulsf3_pse+0x7a>
     eee:	ee 0f       	add	r30, r30
     ef0:	ff 1f       	adc	r31, r31
     ef2:	bb 1f       	adc	r27, r27
     ef4:	66 1f       	adc	r22, r22
     ef6:	77 1f       	adc	r23, r23
     ef8:	88 1f       	adc	r24, r24
     efa:	91 50       	subi	r25, 0x01	; 1
     efc:	50 40       	sbci	r21, 0x00	; 0
     efe:	a9 f7       	brne	.-22     	; 0xeea <__mulsf3_pse+0x64>
     f00:	9e 3f       	cpi	r25, 0xFE	; 254
     f02:	51 05       	cpc	r21, r1
     f04:	70 f0       	brcs	.+28     	; 0xf22 <__mulsf3_pse+0x9c>
     f06:	60 cf       	rjmp	.-320    	; 0xdc8 <__fp_inf>
     f08:	aa cf       	rjmp	.-172    	; 0xe5e <__fp_szero>
     f0a:	5f 3f       	cpi	r21, 0xFF	; 255
     f0c:	ec f3       	brlt	.-6      	; 0xf08 <__mulsf3_pse+0x82>
     f0e:	98 3e       	cpi	r25, 0xE8	; 232
     f10:	dc f3       	brlt	.-10     	; 0xf08 <__mulsf3_pse+0x82>
     f12:	86 95       	lsr	r24
     f14:	77 95       	ror	r23
     f16:	67 95       	ror	r22
     f18:	b7 95       	ror	r27
     f1a:	f7 95       	ror	r31
     f1c:	e7 95       	ror	r30
     f1e:	9f 5f       	subi	r25, 0xFF	; 255
     f20:	c1 f7       	brne	.-16     	; 0xf12 <__mulsf3_pse+0x8c>
     f22:	fe 2b       	or	r31, r30
     f24:	88 0f       	add	r24, r24
     f26:	91 1d       	adc	r25, r1
     f28:	96 95       	lsr	r25
     f2a:	87 95       	ror	r24
     f2c:	97 f9       	bld	r25, 7
     f2e:	08 95       	ret

00000f30 <__udivmodsi4>:
     f30:	a1 e2       	ldi	r26, 0x21	; 33
     f32:	1a 2e       	mov	r1, r26
     f34:	aa 1b       	sub	r26, r26
     f36:	bb 1b       	sub	r27, r27
     f38:	fd 01       	movw	r30, r26
     f3a:	0d c0       	rjmp	.+26     	; 0xf56 <__udivmodsi4_ep>

00000f3c <__udivmodsi4_loop>:
     f3c:	aa 1f       	adc	r26, r26
     f3e:	bb 1f       	adc	r27, r27
     f40:	ee 1f       	adc	r30, r30
     f42:	ff 1f       	adc	r31, r31
     f44:	a2 17       	cp	r26, r18
     f46:	b3 07       	cpc	r27, r19
     f48:	e4 07       	cpc	r30, r20
     f4a:	f5 07       	cpc	r31, r21
     f4c:	20 f0       	brcs	.+8      	; 0xf56 <__udivmodsi4_ep>
     f4e:	a2 1b       	sub	r26, r18
     f50:	b3 0b       	sbc	r27, r19
     f52:	e4 0b       	sbc	r30, r20
     f54:	f5 0b       	sbc	r31, r21

00000f56 <__udivmodsi4_ep>:
     f56:	66 1f       	adc	r22, r22
     f58:	77 1f       	adc	r23, r23
     f5a:	88 1f       	adc	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	1a 94       	dec	r1
     f60:	69 f7       	brne	.-38     	; 0xf3c <__udivmodsi4_loop>
     f62:	60 95       	com	r22
     f64:	70 95       	com	r23
     f66:	80 95       	com	r24
     f68:	90 95       	com	r25
     f6a:	9b 01       	movw	r18, r22
     f6c:	ac 01       	movw	r20, r24
     f6e:	bd 01       	movw	r22, r26
     f70:	cf 01       	movw	r24, r30
     f72:	08 95       	ret

00000f74 <__tablejump2__>:
     f74:	ee 0f       	add	r30, r30
     f76:	ff 1f       	adc	r31, r31
     f78:	05 90       	lpm	r0, Z+
     f7a:	f4 91       	lpm	r31, Z
     f7c:	e0 2d       	mov	r30, r0
     f7e:	09 94       	ijmp

00000f80 <__umulhisi3>:
     f80:	a2 9f       	mul	r26, r18
     f82:	b0 01       	movw	r22, r0
     f84:	b3 9f       	mul	r27, r19
     f86:	c0 01       	movw	r24, r0
     f88:	a3 9f       	mul	r26, r19
     f8a:	70 0d       	add	r23, r0
     f8c:	81 1d       	adc	r24, r1
     f8e:	11 24       	eor	r1, r1
     f90:	91 1d       	adc	r25, r1
     f92:	b2 9f       	mul	r27, r18
     f94:	70 0d       	add	r23, r0
     f96:	81 1d       	adc	r24, r1
     f98:	11 24       	eor	r1, r1
     f9a:	91 1d       	adc	r25, r1
     f9c:	08 95       	ret

00000f9e <strcat>:
     f9e:	fb 01       	movw	r30, r22
     fa0:	dc 01       	movw	r26, r24
     fa2:	0d 90       	ld	r0, X+
     fa4:	00 20       	and	r0, r0
     fa6:	e9 f7       	brne	.-6      	; 0xfa2 <strcat+0x4>
     fa8:	11 97       	sbiw	r26, 0x01	; 1
     faa:	01 90       	ld	r0, Z+
     fac:	0d 92       	st	X+, r0
     fae:	00 20       	and	r0, r0
     fb0:	e1 f7       	brne	.-8      	; 0xfaa <strcat+0xc>
     fb2:	08 95       	ret

00000fb4 <__itoa_ncheck>:
     fb4:	bb 27       	eor	r27, r27
     fb6:	4a 30       	cpi	r20, 0x0A	; 10
     fb8:	31 f4       	brne	.+12     	; 0xfc6 <__itoa_ncheck+0x12>
     fba:	99 23       	and	r25, r25
     fbc:	22 f4       	brpl	.+8      	; 0xfc6 <__itoa_ncheck+0x12>
     fbe:	bd e2       	ldi	r27, 0x2D	; 45
     fc0:	90 95       	com	r25
     fc2:	81 95       	neg	r24
     fc4:	9f 4f       	sbci	r25, 0xFF	; 255
     fc6:	01 c0       	rjmp	.+2      	; 0xfca <__utoa_common>

00000fc8 <__utoa_ncheck>:
     fc8:	bb 27       	eor	r27, r27

00000fca <__utoa_common>:
     fca:	fb 01       	movw	r30, r22
     fcc:	55 27       	eor	r21, r21
     fce:	aa 27       	eor	r26, r26
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	aa 1f       	adc	r26, r26
     fd6:	a4 17       	cp	r26, r20
     fd8:	10 f0       	brcs	.+4      	; 0xfde <__utoa_common+0x14>
     fda:	a4 1b       	sub	r26, r20
     fdc:	83 95       	inc	r24
     fde:	50 51       	subi	r21, 0x10	; 16
     fe0:	b9 f7       	brne	.-18     	; 0xfd0 <__utoa_common+0x6>
     fe2:	a0 5d       	subi	r26, 0xD0	; 208
     fe4:	aa 33       	cpi	r26, 0x3A	; 58
     fe6:	08 f0       	brcs	.+2      	; 0xfea <__utoa_common+0x20>
     fe8:	a9 5d       	subi	r26, 0xD9	; 217
     fea:	a1 93       	st	Z+, r26
     fec:	00 97       	sbiw	r24, 0x00	; 0
     fee:	79 f7       	brne	.-34     	; 0xfce <__utoa_common+0x4>
     ff0:	b1 11       	cpse	r27, r1
     ff2:	b1 93       	st	Z+, r27
     ff4:	11 92       	st	Z+, r1
     ff6:	cb 01       	movw	r24, r22
     ff8:	00 c0       	rjmp	.+0      	; 0xffa <strrev>

00000ffa <strrev>:
     ffa:	dc 01       	movw	r26, r24
     ffc:	fc 01       	movw	r30, r24
     ffe:	67 2f       	mov	r22, r23
    1000:	71 91       	ld	r23, Z+
    1002:	77 23       	and	r23, r23
    1004:	e1 f7       	brne	.-8      	; 0xffe <strrev+0x4>
    1006:	32 97       	sbiw	r30, 0x02	; 2
    1008:	04 c0       	rjmp	.+8      	; 0x1012 <strrev+0x18>
    100a:	7c 91       	ld	r23, X
    100c:	6d 93       	st	X+, r22
    100e:	70 83       	st	Z, r23
    1010:	62 91       	ld	r22, -Z
    1012:	ae 17       	cp	r26, r30
    1014:	bf 07       	cpc	r27, r31
    1016:	c8 f3       	brcs	.-14     	; 0x100a <strrev+0x10>
    1018:	08 95       	ret

0000101a <_exit>:
    101a:	f8 94       	cli

0000101c <__stop_program>:
    101c:	ff cf       	rjmp	.-2      	; 0x101c <__stop_program>
